import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { NgxLoggerLevel } from '../types/logger-level.enum';
import { DEFAULT_COLOR_SCHEME } from './color-scheme';
import * as i0 from "@angular/core";
export class NGXLoggerWriterService {
    constructor(platformId) {
        this.platformId = platformId;
        this.isIE = isPlatformBrowser(platformId) && navigator && navigator.userAgent &&
            !!(navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.match(/Trident\//) || navigator.userAgent.match(/Edge\//));
        this.logFunc = this.isIE ? this.logIE.bind(this) : this.logModern.bind(this);
    }
    /** Generate a "meta" string that is displayed before the content sent to the log function */
    prepareMetaString(metadata, config) {
        const fileDetails = config.disableFileDetails === true ? '' : `[${metadata.fileName}:${metadata.lineNumber}:${metadata.columnNumber}]`;
        return `${metadata.timestamp} ${NgxLoggerLevel[metadata.level]} ${fileDetails}`;
    }
    /** Get the color to use when writing to console */
    getColor(metadata, config) {
        var _a;
        const configColorScheme = (_a = config.colorScheme) !== null && _a !== void 0 ? _a : DEFAULT_COLOR_SCHEME;
        // this is needed to avoid a build error
        if (metadata.level === NgxLoggerLevel.OFF) {
            return undefined;
        }
        return configColorScheme[metadata.level];
    }
    /** Log to the console specifically for IE */
    logIE(metadata, config, metaString) {
        // Coloring doesn't work in IE
        // make sure additional isn't null or undefined so that ...additional doesn't error
        const additional = metadata.additional || [];
        switch (metadata.level) {
            case NgxLoggerLevel.WARN:
                console.warn(`${metaString} `, metadata.message, ...additional);
                break;
            case NgxLoggerLevel.ERROR:
            case NgxLoggerLevel.FATAL:
                console.error(`${metaString} `, metadata.message, ...additional);
                break;
            case NgxLoggerLevel.INFO:
                console.info(`${metaString} `, metadata.message, ...additional);
                break;
            default:
                console.log(`${metaString} `, metadata.message, ...additional);
        }
    }
    /** Log to the console */
    logModern(metadata, config, metaString) {
        const color = this.getColor(metadata, config);
        // make sure additional isn't null or undefined so that ...additional doesn't error
        const additional = metadata.additional || [];
        switch (metadata.level) {
            case NgxLoggerLevel.WARN:
                console.warn(`%c${metaString}`, `color:${color}`, metadata.message, ...additional);
                break;
            case NgxLoggerLevel.ERROR:
            case NgxLoggerLevel.FATAL:
                console.error(`%c${metaString}`, `color:${color}`, metadata.message, ...additional);
                break;
            case NgxLoggerLevel.INFO:
                console.info(`%c${metaString}`, `color:${color}`, metadata.message, ...additional);
                break;
            //  Disabling console.trace since the stack trace is not helpful. it is showing the stack trace of
            // the console.trace statement
            // case NgxLoggerLevel.TRACE:
            //   console.trace(`%c${metaString}`, `color:${color}`, message, ...additional);
            //   break;
            case NgxLoggerLevel.DEBUG:
                console.debug(`%c${metaString}`, `color:${color}`, metadata.message, ...additional);
                break;
            default:
                console.log(`%c${metaString}`, `color:${color}`, metadata.message, ...additional);
        }
    }
    /** Write the content sent to the log function to the console */
    writeMessage(metadata, config) {
        const metaString = this.prepareMetaString(metadata, config);
        this.logFunc(metadata, config, metaString);
    }
}
/** @nocollapse */ NGXLoggerWriterService.ɵfac = function NGXLoggerWriterService_Factory(t) { return new (t || NGXLoggerWriterService)(i0.ɵɵinject(PLATFORM_ID)); };
/** @nocollapse */ NGXLoggerWriterService.ɵprov = i0.ɵɵdefineInjectable({ token: NGXLoggerWriterService, factory: NGXLoggerWriterService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(NGXLoggerWriterService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, null); })();
//# sourceMappingURL=data:application/json;base64,