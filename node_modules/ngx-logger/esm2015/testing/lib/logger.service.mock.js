import { Injectable } from "@angular/core";
import { NgxLoggerLevel } from 'ngx-logger';
import * as i0 from "@angular/core";
// todo bmtheo, there should be an interface or something to make sure this mock sticks to the real API
export class NGXLoggerMock {
    get level() {
        return NgxLoggerLevel.ERROR;
    }
    get serverLogLevel() {
        return NgxLoggerLevel.OFF;
    }
    trace(message, ...additional) {
    }
    debug(message, ...additional) {
    }
    info(message, ...additional) {
    }
    log(message, ...additional) {
    }
    warn(message, ...additional) {
    }
    error(message, ...additional) {
    }
    fatal(message, ...additional) {
    }
    updateConfig(config) {
    }
    setCustomHttpHeaders(headers) {
    }
    setCustomParams(params) {
    }
    registerMonitor(monitor) {
    }
    setWithCredentialsOptionValue(withCredentials) {
    }
    getConfigSnapshot() {
        return { level: NgxLoggerLevel.ERROR };
    }
}
/** @nocollapse */ NGXLoggerMock.ɵfac = function NGXLoggerMock_Factory(t) { return new (t || NGXLoggerMock)(); };
/** @nocollapse */ NGXLoggerMock.ɵprov = i0.ɵɵdefineInjectable({ token: NGXLoggerMock, factory: NGXLoggerMock.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(NGXLoggerMock, [{
        type: Injectable
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnNlcnZpY2UubW9jay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Rlc3Rpbmcvc3JjL2xpYi9sb2dnZXIuc2VydmljZS5tb2NrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUF1QyxjQUFjLEVBQUUsTUFBTSxZQUFZLENBQUM7O0FBRWpGLHVHQUF1RztBQUV2RyxNQUFNLE9BQU8sYUFBYTtJQUV4QixJQUFJLEtBQUs7UUFDUCxPQUFPLGNBQWMsQ0FBQyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQUksY0FBYztRQUNoQixPQUFPLGNBQWMsQ0FBQyxHQUFHLENBQUM7SUFDNUIsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUEyQixFQUFFLEdBQUcsVUFBaUI7SUFDdkQsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUEyQixFQUFFLEdBQUcsVUFBaUI7SUFDdkQsQ0FBQztJQUVELElBQUksQ0FBQyxPQUEyQixFQUFFLEdBQUcsVUFBaUI7SUFDdEQsQ0FBQztJQUVELEdBQUcsQ0FBQyxPQUEyQixFQUFFLEdBQUcsVUFBaUI7SUFDckQsQ0FBQztJQUVELElBQUksQ0FBQyxPQUEyQixFQUFFLEdBQUcsVUFBaUI7SUFDdEQsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUEyQixFQUFFLEdBQUcsVUFBaUI7SUFDdkQsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUEyQixFQUFFLEdBQUcsVUFBaUI7SUFDdkQsQ0FBQztJQUVELFlBQVksQ0FBQyxNQUFXO0lBRXhCLENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxPQUFvQjtJQUN6QyxDQUFDO0lBRUQsZUFBZSxDQUFDLE1BQWtCO0lBQ2xDLENBQUM7SUFFRCxlQUFlLENBQUMsT0FBMEI7SUFDMUMsQ0FBQztJQUVELDZCQUE2QixDQUFDLGVBQXdCO0lBQ3RELENBQUM7SUFFRCxpQkFBaUI7UUFDZixPQUFPLEVBQUUsS0FBSyxFQUFFLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN6QyxDQUFDOzs2RkFqRFUsYUFBYTt3RUFBYixhQUFhLFdBQWIsYUFBYTt1RkFBYixhQUFhO2NBRHpCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwSGVhZGVycywgSHR0cFBhcmFtcyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcbmltcG9ydCB7IElOR1hMb2dnZXJDb25maWcsIElOR1hMb2dnZXJNb25pdG9yLCBOZ3hMb2dnZXJMZXZlbCB9IGZyb20gJ25neC1sb2dnZXInO1xyXG5cclxuLy8gdG9kbyBibXRoZW8sIHRoZXJlIHNob3VsZCBiZSBhbiBpbnRlcmZhY2Ugb3Igc29tZXRoaW5nIHRvIG1ha2Ugc3VyZSB0aGlzIG1vY2sgc3RpY2tzIHRvIHRoZSByZWFsIEFQSVxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBOR1hMb2dnZXJNb2NrIHtcclxuXHJcbiAgZ2V0IGxldmVsKCk6IE5neExvZ2dlckxldmVsIHtcclxuICAgIHJldHVybiBOZ3hMb2dnZXJMZXZlbC5FUlJPUjtcclxuICB9XHJcblxyXG4gIGdldCBzZXJ2ZXJMb2dMZXZlbCgpOiBOZ3hMb2dnZXJMZXZlbCB7XHJcbiAgICByZXR1cm4gTmd4TG9nZ2VyTGV2ZWwuT0ZGO1xyXG4gIH1cclxuXHJcbiAgdHJhY2UobWVzc2FnZT86IGFueSB8ICgoKSA9PiBhbnkpLCAuLi5hZGRpdGlvbmFsOiBhbnlbXSkge1xyXG4gIH1cclxuXHJcbiAgZGVidWcobWVzc2FnZT86IGFueSB8ICgoKSA9PiBhbnkpLCAuLi5hZGRpdGlvbmFsOiBhbnlbXSkge1xyXG4gIH1cclxuXHJcbiAgaW5mbyhtZXNzYWdlPzogYW55IHwgKCgpID0+IGFueSksIC4uLmFkZGl0aW9uYWw6IGFueVtdKSB7XHJcbiAgfVxyXG5cclxuICBsb2cobWVzc2FnZT86IGFueSB8ICgoKSA9PiBhbnkpLCAuLi5hZGRpdGlvbmFsOiBhbnlbXSkge1xyXG4gIH1cclxuXHJcbiAgd2FybihtZXNzYWdlPzogYW55IHwgKCgpID0+IGFueSksIC4uLmFkZGl0aW9uYWw6IGFueVtdKSB7XHJcbiAgfVxyXG5cclxuICBlcnJvcihtZXNzYWdlPzogYW55IHwgKCgpID0+IGFueSksIC4uLmFkZGl0aW9uYWw6IGFueVtdKSB7XHJcbiAgfVxyXG5cclxuICBmYXRhbChtZXNzYWdlPzogYW55IHwgKCgpID0+IGFueSksIC4uLmFkZGl0aW9uYWw6IGFueVtdKSB7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVDb25maWcoY29uZmlnOiBhbnkpIHtcclxuXHJcbiAgfVxyXG5cclxuICBzZXRDdXN0b21IdHRwSGVhZGVycyhoZWFkZXJzOiBIdHRwSGVhZGVycykge1xyXG4gIH1cclxuXHJcbiAgc2V0Q3VzdG9tUGFyYW1zKHBhcmFtczogSHR0cFBhcmFtcykge1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJNb25pdG9yKG1vbml0b3I6IElOR1hMb2dnZXJNb25pdG9yKSB7XHJcbiAgfVxyXG5cclxuICBzZXRXaXRoQ3JlZGVudGlhbHNPcHRpb25WYWx1ZSh3aXRoQ3JlZGVudGlhbHM6IGJvb2xlYW4pIHtcclxuICB9XHJcblxyXG4gIGdldENvbmZpZ1NuYXBzaG90KCk6IElOR1hMb2dnZXJDb25maWcge1xyXG4gICAgcmV0dXJuIHsgbGV2ZWw6IE5neExvZ2dlckxldmVsLkVSUk9SIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==