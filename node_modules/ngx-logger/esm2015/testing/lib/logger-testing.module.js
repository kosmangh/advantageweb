import { NgModule } from '@angular/core';
import { CustomNGXLoggerService, LoggerModule, NGXLogger, NgxLoggerLevel, TOKEN_LOGGER_CONFIG, TOKEN_LOGGER_CONFIG_ENGINE_FACTORY, TOKEN_LOGGER_MAPPER_SERVICE, TOKEN_LOGGER_METADATA_SERVICE, TOKEN_LOGGER_RULES_SERVICE, TOKEN_LOGGER_SERVER_SERVICE, TOKEN_LOGGER_WRITER_SERVICE } from 'ngx-logger';
import { NGXLoggerConfigEngineFactoryMock } from './config-engine-factory.mock';
import { CustomNGXLoggerServiceMock } from './custom-logger.service.mock';
import { NGXLoggerMock } from './logger.service.mock';
import { NGXLoggerMapperServiceMock } from './mapper.service.mock';
import { NGXLoggerMetadataServiceMock } from './metadata.service.mock';
import { NGXLoggerRulesServiceMock } from './rules.service.mock';
import { NGXLoggerServerServiceMock } from './server.service.mock';
import { NGXLoggerWriterServiceMock } from './writer.service.mock';
import * as i0 from "@angular/core";
export class LoggerTestingModule {
}
/** @nocollapse */ LoggerTestingModule.ɵfac = function LoggerTestingModule_Factory(t) { return new (t || LoggerTestingModule)(); };
/** @nocollapse */ LoggerTestingModule.ɵmod = i0.ɵɵdefineNgModule({ type: LoggerTestingModule });
/** @nocollapse */ LoggerTestingModule.ɵinj = i0.ɵɵdefineInjector({ providers: [
        { provide: NGXLogger, useClass: NGXLoggerMock },
        { provide: TOKEN_LOGGER_CONFIG, useValue: { level: NgxLoggerLevel.ERROR } },
        { provide: TOKEN_LOGGER_CONFIG_ENGINE_FACTORY, useClass: NGXLoggerConfigEngineFactoryMock },
        { provide: TOKEN_LOGGER_METADATA_SERVICE, useClass: NGXLoggerMetadataServiceMock },
        { provide: TOKEN_LOGGER_RULES_SERVICE, useClass: NGXLoggerRulesServiceMock },
        { provide: TOKEN_LOGGER_MAPPER_SERVICE, useClass: NGXLoggerMapperServiceMock },
        { provide: TOKEN_LOGGER_WRITER_SERVICE, useClass: NGXLoggerWriterServiceMock },
        { provide: TOKEN_LOGGER_SERVER_SERVICE, useClass: NGXLoggerServerServiceMock },
        { provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },
    ], imports: [[LoggerModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(LoggerTestingModule, { imports: [LoggerModule] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(LoggerTestingModule, [{
        type: NgModule,
        args: [{
                imports: [LoggerModule],
                providers: [
                    { provide: NGXLogger, useClass: NGXLoggerMock },
                    { provide: TOKEN_LOGGER_CONFIG, useValue: { level: NgxLoggerLevel.ERROR } },
                    { provide: TOKEN_LOGGER_CONFIG_ENGINE_FACTORY, useClass: NGXLoggerConfigEngineFactoryMock },
                    { provide: TOKEN_LOGGER_METADATA_SERVICE, useClass: NGXLoggerMetadataServiceMock },
                    { provide: TOKEN_LOGGER_RULES_SERVICE, useClass: NGXLoggerRulesServiceMock },
                    { provide: TOKEN_LOGGER_MAPPER_SERVICE, useClass: NGXLoggerMapperServiceMock },
                    { provide: TOKEN_LOGGER_WRITER_SERVICE, useClass: NGXLoggerWriterServiceMock },
                    { provide: TOKEN_LOGGER_SERVER_SERVICE, useClass: NGXLoggerServerServiceMock },
                    { provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },
                ]
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLXRlc3RpbmcubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vdGVzdGluZy9zcmMvbGliL2xvZ2dlci10ZXN0aW5nLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxtQkFBbUIsRUFBRSxrQ0FBa0MsRUFBRSwyQkFBMkIsRUFBRSw2QkFBNkIsRUFBRSwwQkFBMEIsRUFBRSwyQkFBMkIsRUFBRSwyQkFBMkIsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN4UyxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNoRixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbkUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbkUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBaUJuRSxNQUFNLE9BQU8sbUJBQW1COzt5R0FBbkIsbUJBQW1COzBFQUFuQixtQkFBbUI7K0VBWm5CO1FBQ1QsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUU7UUFDL0MsRUFBRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLEVBQUUsS0FBSyxFQUFFLGNBQWMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUMzRSxFQUFFLE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxRQUFRLEVBQUUsZ0NBQWdDLEVBQUU7UUFDM0YsRUFBRSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsUUFBUSxFQUFFLDRCQUE0QixFQUFFO1FBQ2xGLEVBQUUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLFFBQVEsRUFBRSx5QkFBeUIsRUFBRTtRQUM1RSxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUU7UUFDOUUsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFO1FBQzlFLEVBQUUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLFFBQVEsRUFBRSwwQkFBMEIsRUFBRTtRQUM5RSxFQUFFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUU7S0FDMUUsWUFYUSxDQUFDLFlBQVksQ0FBQzt3RkFhWixtQkFBbUIsY0FicEIsWUFBWTt1RkFhWCxtQkFBbUI7Y0FkL0IsUUFBUTtlQUFDO2dCQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztnQkFDdkIsU0FBUyxFQUFFO29CQUNULEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFO29CQUMvQyxFQUFFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsRUFBRSxLQUFLLEVBQUUsY0FBYyxDQUFDLEtBQUssRUFBRSxFQUFFO29CQUMzRSxFQUFFLE9BQU8sRUFBRSxrQ0FBa0MsRUFBRSxRQUFRLEVBQUUsZ0NBQWdDLEVBQUU7b0JBQzNGLEVBQUUsT0FBTyxFQUFFLDZCQUE2QixFQUFFLFFBQVEsRUFBRSw0QkFBNEIsRUFBRTtvQkFDbEYsRUFBRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsUUFBUSxFQUFFLHlCQUF5QixFQUFFO29CQUM1RSxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUU7b0JBQzlFLEVBQUUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLFFBQVEsRUFBRSwwQkFBMEIsRUFBRTtvQkFDOUUsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFO29CQUM5RSxFQUFFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUU7aUJBQzFFO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDdXN0b21OR1hMb2dnZXJTZXJ2aWNlLCBMb2dnZXJNb2R1bGUsIE5HWExvZ2dlciwgTmd4TG9nZ2VyTGV2ZWwsIFRPS0VOX0xPR0dFUl9DT05GSUcsIFRPS0VOX0xPR0dFUl9DT05GSUdfRU5HSU5FX0ZBQ1RPUlksIFRPS0VOX0xPR0dFUl9NQVBQRVJfU0VSVklDRSwgVE9LRU5fTE9HR0VSX01FVEFEQVRBX1NFUlZJQ0UsIFRPS0VOX0xPR0dFUl9SVUxFU19TRVJWSUNFLCBUT0tFTl9MT0dHRVJfU0VSVkVSX1NFUlZJQ0UsIFRPS0VOX0xPR0dFUl9XUklURVJfU0VSVklDRSB9IGZyb20gJ25neC1sb2dnZXInO1xyXG5pbXBvcnQgeyBOR1hMb2dnZXJDb25maWdFbmdpbmVGYWN0b3J5TW9jayB9IGZyb20gJy4vY29uZmlnLWVuZ2luZS1mYWN0b3J5Lm1vY2snO1xyXG5pbXBvcnQgeyBDdXN0b21OR1hMb2dnZXJTZXJ2aWNlTW9jayB9IGZyb20gJy4vY3VzdG9tLWxvZ2dlci5zZXJ2aWNlLm1vY2snO1xyXG5pbXBvcnQgeyBOR1hMb2dnZXJNb2NrIH0gZnJvbSAnLi9sb2dnZXIuc2VydmljZS5tb2NrJztcclxuaW1wb3J0IHsgTkdYTG9nZ2VyTWFwcGVyU2VydmljZU1vY2sgfSBmcm9tICcuL21hcHBlci5zZXJ2aWNlLm1vY2snO1xyXG5pbXBvcnQgeyBOR1hMb2dnZXJNZXRhZGF0YVNlcnZpY2VNb2NrIH0gZnJvbSAnLi9tZXRhZGF0YS5zZXJ2aWNlLm1vY2snO1xyXG5pbXBvcnQgeyBOR1hMb2dnZXJSdWxlc1NlcnZpY2VNb2NrIH0gZnJvbSAnLi9ydWxlcy5zZXJ2aWNlLm1vY2snO1xyXG5pbXBvcnQgeyBOR1hMb2dnZXJTZXJ2ZXJTZXJ2aWNlTW9jayB9IGZyb20gJy4vc2VydmVyLnNlcnZpY2UubW9jayc7XHJcbmltcG9ydCB7IE5HWExvZ2dlcldyaXRlclNlcnZpY2VNb2NrIH0gZnJvbSAnLi93cml0ZXIuc2VydmljZS5tb2NrJztcclxuXHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtMb2dnZXJNb2R1bGVdLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgeyBwcm92aWRlOiBOR1hMb2dnZXIsIHVzZUNsYXNzOiBOR1hMb2dnZXJNb2NrIH0sXHJcbiAgICB7IHByb3ZpZGU6IFRPS0VOX0xPR0dFUl9DT05GSUcsIHVzZVZhbHVlOiB7IGxldmVsOiBOZ3hMb2dnZXJMZXZlbC5FUlJPUiB9IH0sXHJcbiAgICB7IHByb3ZpZGU6IFRPS0VOX0xPR0dFUl9DT05GSUdfRU5HSU5FX0ZBQ1RPUlksIHVzZUNsYXNzOiBOR1hMb2dnZXJDb25maWdFbmdpbmVGYWN0b3J5TW9jayB9LFxyXG4gICAgeyBwcm92aWRlOiBUT0tFTl9MT0dHRVJfTUVUQURBVEFfU0VSVklDRSwgdXNlQ2xhc3M6IE5HWExvZ2dlck1ldGFkYXRhU2VydmljZU1vY2sgfSxcclxuICAgIHsgcHJvdmlkZTogVE9LRU5fTE9HR0VSX1JVTEVTX1NFUlZJQ0UsIHVzZUNsYXNzOiBOR1hMb2dnZXJSdWxlc1NlcnZpY2VNb2NrIH0sXHJcbiAgICB7IHByb3ZpZGU6IFRPS0VOX0xPR0dFUl9NQVBQRVJfU0VSVklDRSwgdXNlQ2xhc3M6IE5HWExvZ2dlck1hcHBlclNlcnZpY2VNb2NrIH0sXHJcbiAgICB7IHByb3ZpZGU6IFRPS0VOX0xPR0dFUl9XUklURVJfU0VSVklDRSwgdXNlQ2xhc3M6IE5HWExvZ2dlcldyaXRlclNlcnZpY2VNb2NrIH0sXHJcbiAgICB7IHByb3ZpZGU6IFRPS0VOX0xPR0dFUl9TRVJWRVJfU0VSVklDRSwgdXNlQ2xhc3M6IE5HWExvZ2dlclNlcnZlclNlcnZpY2VNb2NrIH0sXHJcbiAgICB7IHByb3ZpZGU6IEN1c3RvbU5HWExvZ2dlclNlcnZpY2UsIHVzZUNsYXNzOiBDdXN0b21OR1hMb2dnZXJTZXJ2aWNlTW9jayB9LFxyXG4gIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIExvZ2dlclRlc3RpbmdNb2R1bGUgeyB9XHJcbiJdfQ==