{"version":3,"file":"ngx-logger-testing.js","sources":["../../../testing/src/lib/config-engine.mock.ts","../../../testing/src/lib/logger.service.mock.ts","../../../testing/src/lib/custom-logger.service.mock.ts","../../../testing/src/lib/config-engine-factory.mock.ts","../../../testing/src/lib/mapper.service.mock.ts","../../../testing/src/lib/metadata.service.mock.ts","../../../testing/src/lib/rules.service.mock.ts","../../../testing/src/lib/server.service.mock.ts","../../../testing/src/lib/writer.service.mock.ts","../../../testing/src/lib/logger-testing.module.ts","../../../testing/src/ngx-logger-testing.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerConfigEngine, NgxLoggerLevel } from 'ngx-logger';\r\n\r\n@Injectable()\r\nexport class NGXLoggerConfigEngineMock implements INGXLoggerConfigEngine {\r\n\r\n  get level(): NgxLoggerLevel {\r\n    return NgxLoggerLevel.ERROR;\r\n  }\r\n\r\n  get serverLogLevel(): NgxLoggerLevel {\r\n    return NgxLoggerLevel.OFF;\r\n  }\r\n\r\n  updateConfig(config: INGXLoggerConfig) {\r\n  }\r\n\r\n  getConfig(): INGXLoggerConfig {\r\n    return { level: NgxLoggerLevel.ERROR };\r\n  }\r\n}\r\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from \"@angular/core\";\r\nimport { INGXLoggerConfig, INGXLoggerMonitor, NgxLoggerLevel } from 'ngx-logger';\r\n\r\n// todo bmtheo, there should be an interface or something to make sure this mock sticks to the real API\r\n@Injectable()\r\nexport class NGXLoggerMock {\r\n\r\n  get level(): NgxLoggerLevel {\r\n    return NgxLoggerLevel.ERROR;\r\n  }\r\n\r\n  get serverLogLevel(): NgxLoggerLevel {\r\n    return NgxLoggerLevel.OFF;\r\n  }\r\n\r\n  trace(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  debug(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  info(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  log(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  warn(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  error(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  fatal(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  updateConfig(config: any) {\r\n\r\n  }\r\n\r\n  setCustomHttpHeaders(headers: HttpHeaders) {\r\n  }\r\n\r\n  setCustomParams(params: HttpParams) {\r\n  }\r\n\r\n  registerMonitor(monitor: INGXLoggerMonitor) {\r\n  }\r\n\r\n  setWithCredentialsOptionValue(withCredentials: boolean) {\r\n  }\r\n\r\n  getConfigSnapshot(): INGXLoggerConfig {\r\n    return { level: NgxLoggerLevel.ERROR };\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { NGXLoggerMock } from \"./logger.service.mock\";\r\n\r\n/**\r\n * CustomNGXLoggerServiceMock is a mock for CustomNGXLoggerService\r\n */\r\n@Injectable()\r\nexport class CustomNGXLoggerServiceMock {\r\n\r\n  create(): NGXLoggerMock {\r\n    return new NGXLoggerMock();\r\n  }\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerConfigEngine, INGXLoggerConfigEngineFactory } from 'ngx-logger';\r\nimport { NGXLoggerConfigEngineMock } from './config-engine.mock';\r\n\r\n@Injectable()\r\nexport class NGXLoggerConfigEngineFactoryMock implements INGXLoggerConfigEngineFactory {\r\n\r\n  provideConfigEngine(config: INGXLoggerConfig): INGXLoggerConfigEngine {\r\n    return new NGXLoggerConfigEngineMock();\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerLogPosition, INGXLoggerMapperService, INGXLoggerMetadata } from 'ngx-logger';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n\r\n@Injectable()\r\nexport class NGXLoggerMapperServiceMock implements INGXLoggerMapperService {\r\n  public getLogPosition(config: INGXLoggerConfig, metadata: INGXLoggerMetadata): Observable<INGXLoggerLogPosition> {\r\n    return of({ fileName: 'test.ts' });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerMetadata, INGXLoggerMetadataService, NgxLoggerLevel } from 'ngx-logger';\r\n\r\n\r\n@Injectable()\r\nexport class NGXLoggerMetadataServiceMock implements INGXLoggerMetadataService {\r\n\r\n  public getMetadata(\r\n    level: NgxLoggerLevel,\r\n    config: INGXLoggerConfig,\r\n    message?: any | (() => any),\r\n    additional?: any[],\r\n  ): INGXLoggerMetadata {\r\n    return {\r\n      level: level\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerRulesService, NgxLoggerLevel } from 'ngx-logger';\r\n\r\n\r\n@Injectable()\r\nexport class NGXLoggerRulesServiceMock implements INGXLoggerRulesService {\r\n\r\n  public shouldCallWriter(level: NgxLoggerLevel, config: INGXLoggerConfig, message?: any, additional?: any[]): boolean {\r\n    return false;\r\n  }\r\n\r\n  public shouldCallServer(level: NgxLoggerLevel, config: INGXLoggerConfig, message?: any, additional?: any[]): boolean {\r\n    return false;\r\n  }\r\n\r\n  public shouldCallMonitor(level: NgxLoggerLevel, config: INGXLoggerConfig, message?: any, additional?: any[]): boolean {\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerMetadata, INGXLoggerServerService } from 'ngx-logger';\r\n\r\n\r\n@Injectable()\r\nexport class NGXLoggerServerServiceMock implements INGXLoggerServerService {\r\n\r\n  public sendToServer(metadata: INGXLoggerMetadata, config: INGXLoggerConfig): void {\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerMetadata, INGXLoggerWriterService } from 'ngx-logger';\r\n\r\n\r\n@Injectable()\r\nexport class NGXLoggerWriterServiceMock implements INGXLoggerWriterService {\r\n  public writeMessage(metadata: INGXLoggerMetadata, config: INGXLoggerConfig): void {\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CustomNGXLoggerService, LoggerModule, NGXLogger, NgxLoggerLevel, TOKEN_LOGGER_CONFIG, TOKEN_LOGGER_CONFIG_ENGINE_FACTORY, TOKEN_LOGGER_MAPPER_SERVICE, TOKEN_LOGGER_METADATA_SERVICE, TOKEN_LOGGER_RULES_SERVICE, TOKEN_LOGGER_SERVER_SERVICE, TOKEN_LOGGER_WRITER_SERVICE } from 'ngx-logger';\r\nimport { NGXLoggerConfigEngineFactoryMock } from './config-engine-factory.mock';\r\nimport { CustomNGXLoggerServiceMock } from './custom-logger.service.mock';\r\nimport { NGXLoggerMock } from './logger.service.mock';\r\nimport { NGXLoggerMapperServiceMock } from './mapper.service.mock';\r\nimport { NGXLoggerMetadataServiceMock } from './metadata.service.mock';\r\nimport { NGXLoggerRulesServiceMock } from './rules.service.mock';\r\nimport { NGXLoggerServerServiceMock } from './server.service.mock';\r\nimport { NGXLoggerWriterServiceMock } from './writer.service.mock';\r\n\r\n\r\n@NgModule({\r\n  imports: [LoggerModule],\r\n  providers: [\r\n    { provide: NGXLogger, useClass: NGXLoggerMock },\r\n    { provide: TOKEN_LOGGER_CONFIG, useValue: { level: NgxLoggerLevel.ERROR } },\r\n    { provide: TOKEN_LOGGER_CONFIG_ENGINE_FACTORY, useClass: NGXLoggerConfigEngineFactoryMock },\r\n    { provide: TOKEN_LOGGER_METADATA_SERVICE, useClass: NGXLoggerMetadataServiceMock },\r\n    { provide: TOKEN_LOGGER_RULES_SERVICE, useClass: NGXLoggerRulesServiceMock },\r\n    { provide: TOKEN_LOGGER_MAPPER_SERVICE, useClass: NGXLoggerMapperServiceMock },\r\n    { provide: TOKEN_LOGGER_WRITER_SERVICE, useClass: NGXLoggerWriterServiceMock },\r\n    { provide: TOKEN_LOGGER_SERVER_SERVICE, useClass: NGXLoggerServerServiceMock },\r\n    { provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },\r\n  ]\r\n})\r\nexport class LoggerTestingModule { }\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}