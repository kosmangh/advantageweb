import { Injectable } from "@angular/core";
import { NgxLoggerLevel } from 'ngx-logger';
import * as i0 from "@angular/core";
// todo bmtheo, there should be an interface or something to make sure this mock sticks to the real API
export class NGXLoggerMock {
    get level() {
        return NgxLoggerLevel.ERROR;
    }
    get serverLogLevel() {
        return NgxLoggerLevel.OFF;
    }
    trace(message, ...additional) {
    }
    debug(message, ...additional) {
    }
    info(message, ...additional) {
    }
    log(message, ...additional) {
    }
    warn(message, ...additional) {
    }
    error(message, ...additional) {
    }
    fatal(message, ...additional) {
    }
    partialUpdateConfig(partialConfig) {
    }
    updateConfig(config) {
    }
    setCustomHttpHeaders(headers) {
    }
    setCustomParams(params) {
    }
    registerMonitor(monitor) {
    }
    setWithCredentialsOptionValue(withCredentials) {
    }
    getConfigSnapshot() {
        return { level: NgxLoggerLevel.ERROR };
    }
}
/** @nocollapse */ /** @nocollapse */ NGXLoggerMock.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerMock, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ /** @nocollapse */ NGXLoggerMock.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerMock });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerMock, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnNlcnZpY2UubW9jay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Rlc3Rpbmcvc3JjL2xpYi9sb2dnZXIuc2VydmljZS5tb2NrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUF1QyxjQUFjLEVBQUUsTUFBTSxZQUFZLENBQUM7O0FBRWpGLHVHQUF1RztBQUV2RyxNQUFNLE9BQU8sYUFBYTtJQUV4QixJQUFJLEtBQUs7UUFDUCxPQUFPLGNBQWMsQ0FBQyxLQUFLLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQUksY0FBYztRQUNoQixPQUFPLGNBQWMsQ0FBQyxHQUFHLENBQUM7SUFDNUIsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUEyQixFQUFFLEdBQUcsVUFBaUI7SUFDdkQsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUEyQixFQUFFLEdBQUcsVUFBaUI7SUFDdkQsQ0FBQztJQUVELElBQUksQ0FBQyxPQUEyQixFQUFFLEdBQUcsVUFBaUI7SUFDdEQsQ0FBQztJQUVELEdBQUcsQ0FBQyxPQUEyQixFQUFFLEdBQUcsVUFBaUI7SUFDckQsQ0FBQztJQUVELElBQUksQ0FBQyxPQUEyQixFQUFFLEdBQUcsVUFBaUI7SUFDdEQsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUEyQixFQUFFLEdBQUcsVUFBaUI7SUFDdkQsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUEyQixFQUFFLEdBQUcsVUFBaUI7SUFDdkQsQ0FBQztJQUVELG1CQUFtQixDQUFDLGFBQXdDO0lBQzVELENBQUM7SUFFRCxZQUFZLENBQUMsTUFBVztJQUV4QixDQUFDO0lBRUQsb0JBQW9CLENBQUMsT0FBb0I7SUFDekMsQ0FBQztJQUVELGVBQWUsQ0FBQyxNQUFrQjtJQUNsQyxDQUFDO0lBRUQsZUFBZSxDQUFDLE9BQTBCO0lBQzFDLENBQUM7SUFFRCw2QkFBNkIsQ0FBQyxlQUF3QjtJQUN0RCxDQUFDO0lBRUQsaUJBQWlCO1FBQ2YsT0FBTyxFQUFFLEtBQUssRUFBRSxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDekMsQ0FBQzs7Z0pBcERVLGFBQWE7b0pBQWIsYUFBYTsyRkFBYixhQUFhO2tCQUR6QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEhlYWRlcnMsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBJTkdYTG9nZ2VyQ29uZmlnLCBJTkdYTG9nZ2VyTW9uaXRvciwgTmd4TG9nZ2VyTGV2ZWwgfSBmcm9tICduZ3gtbG9nZ2VyJztcclxuXHJcbi8vIHRvZG8gYm10aGVvLCB0aGVyZSBzaG91bGQgYmUgYW4gaW50ZXJmYWNlIG9yIHNvbWV0aGluZyB0byBtYWtlIHN1cmUgdGhpcyBtb2NrIHN0aWNrcyB0byB0aGUgcmVhbCBBUElcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTkdYTG9nZ2VyTW9jayB7XHJcblxyXG4gIGdldCBsZXZlbCgpOiBOZ3hMb2dnZXJMZXZlbCB7XHJcbiAgICByZXR1cm4gTmd4TG9nZ2VyTGV2ZWwuRVJST1I7XHJcbiAgfVxyXG5cclxuICBnZXQgc2VydmVyTG9nTGV2ZWwoKTogTmd4TG9nZ2VyTGV2ZWwge1xyXG4gICAgcmV0dXJuIE5neExvZ2dlckxldmVsLk9GRjtcclxuICB9XHJcblxyXG4gIHRyYWNlKG1lc3NhZ2U/OiBhbnkgfCAoKCkgPT4gYW55KSwgLi4uYWRkaXRpb25hbDogYW55W10pIHtcclxuICB9XHJcblxyXG4gIGRlYnVnKG1lc3NhZ2U/OiBhbnkgfCAoKCkgPT4gYW55KSwgLi4uYWRkaXRpb25hbDogYW55W10pIHtcclxuICB9XHJcblxyXG4gIGluZm8obWVzc2FnZT86IGFueSB8ICgoKSA9PiBhbnkpLCAuLi5hZGRpdGlvbmFsOiBhbnlbXSkge1xyXG4gIH1cclxuXHJcbiAgbG9nKG1lc3NhZ2U/OiBhbnkgfCAoKCkgPT4gYW55KSwgLi4uYWRkaXRpb25hbDogYW55W10pIHtcclxuICB9XHJcblxyXG4gIHdhcm4obWVzc2FnZT86IGFueSB8ICgoKSA9PiBhbnkpLCAuLi5hZGRpdGlvbmFsOiBhbnlbXSkge1xyXG4gIH1cclxuXHJcbiAgZXJyb3IobWVzc2FnZT86IGFueSB8ICgoKSA9PiBhbnkpLCAuLi5hZGRpdGlvbmFsOiBhbnlbXSkge1xyXG4gIH1cclxuXHJcbiAgZmF0YWwobWVzc2FnZT86IGFueSB8ICgoKSA9PiBhbnkpLCAuLi5hZGRpdGlvbmFsOiBhbnlbXSkge1xyXG4gIH1cclxuXHJcbiAgcGFydGlhbFVwZGF0ZUNvbmZpZyhwYXJ0aWFsQ29uZmlnOiBQYXJ0aWFsPElOR1hMb2dnZXJDb25maWc+KTogdm9pZCB7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVDb25maWcoY29uZmlnOiBhbnkpIHtcclxuXHJcbiAgfVxyXG5cclxuICBzZXRDdXN0b21IdHRwSGVhZGVycyhoZWFkZXJzOiBIdHRwSGVhZGVycykge1xyXG4gIH1cclxuXHJcbiAgc2V0Q3VzdG9tUGFyYW1zKHBhcmFtczogSHR0cFBhcmFtcykge1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJNb25pdG9yKG1vbml0b3I6IElOR1hMb2dnZXJNb25pdG9yKSB7XHJcbiAgfVxyXG5cclxuICBzZXRXaXRoQ3JlZGVudGlhbHNPcHRpb25WYWx1ZSh3aXRoQ3JlZGVudGlhbHM6IGJvb2xlYW4pIHtcclxuICB9XHJcblxyXG4gIGdldENvbmZpZ1NuYXBzaG90KCk6IElOR1hMb2dnZXJDb25maWcge1xyXG4gICAgcmV0dXJuIHsgbGV2ZWw6IE5neExvZ2dlckxldmVsLkVSUk9SIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==