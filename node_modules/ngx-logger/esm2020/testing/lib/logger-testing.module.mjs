import { NgModule } from '@angular/core';
import { CustomNGXLoggerService, LoggerModule, NGXLogger, NgxLoggerLevel, TOKEN_LOGGER_CONFIG, TOKEN_LOGGER_CONFIG_ENGINE_FACTORY, TOKEN_LOGGER_MAPPER_SERVICE, TOKEN_LOGGER_METADATA_SERVICE, TOKEN_LOGGER_RULES_SERVICE, TOKEN_LOGGER_SERVER_SERVICE, TOKEN_LOGGER_WRITER_SERVICE } from 'ngx-logger';
import { NGXLoggerConfigEngineFactoryMock } from './config-engine-factory.mock';
import { CustomNGXLoggerServiceMock } from './custom-logger.service.mock';
import { NGXLoggerMock } from './logger.service.mock';
import { NGXLoggerMapperServiceMock } from './mapper.service.mock';
import { NGXLoggerMetadataServiceMock } from './metadata.service.mock';
import { NGXLoggerRulesServiceMock } from './rules.service.mock';
import { NGXLoggerServerServiceMock } from './server.service.mock';
import { NGXLoggerWriterServiceMock } from './writer.service.mock';
import * as i0 from "@angular/core";
export class LoggerTestingModule {
}
/** @nocollapse */ /** @nocollapse */ LoggerTestingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: LoggerTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ /** @nocollapse */ LoggerTestingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: LoggerTestingModule, imports: [LoggerModule] });
/** @nocollapse */ /** @nocollapse */ LoggerTestingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: LoggerTestingModule, providers: [
        { provide: NGXLogger, useClass: NGXLoggerMock },
        { provide: TOKEN_LOGGER_CONFIG, useValue: { level: NgxLoggerLevel.ERROR } },
        { provide: TOKEN_LOGGER_CONFIG_ENGINE_FACTORY, useClass: NGXLoggerConfigEngineFactoryMock },
        { provide: TOKEN_LOGGER_METADATA_SERVICE, useClass: NGXLoggerMetadataServiceMock },
        { provide: TOKEN_LOGGER_RULES_SERVICE, useClass: NGXLoggerRulesServiceMock },
        { provide: TOKEN_LOGGER_MAPPER_SERVICE, useClass: NGXLoggerMapperServiceMock },
        { provide: TOKEN_LOGGER_WRITER_SERVICE, useClass: NGXLoggerWriterServiceMock },
        { provide: TOKEN_LOGGER_SERVER_SERVICE, useClass: NGXLoggerServerServiceMock },
        { provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },
    ], imports: [[LoggerModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: LoggerTestingModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [LoggerModule],
                    providers: [
                        { provide: NGXLogger, useClass: NGXLoggerMock },
                        { provide: TOKEN_LOGGER_CONFIG, useValue: { level: NgxLoggerLevel.ERROR } },
                        { provide: TOKEN_LOGGER_CONFIG_ENGINE_FACTORY, useClass: NGXLoggerConfigEngineFactoryMock },
                        { provide: TOKEN_LOGGER_METADATA_SERVICE, useClass: NGXLoggerMetadataServiceMock },
                        { provide: TOKEN_LOGGER_RULES_SERVICE, useClass: NGXLoggerRulesServiceMock },
                        { provide: TOKEN_LOGGER_MAPPER_SERVICE, useClass: NGXLoggerMapperServiceMock },
                        { provide: TOKEN_LOGGER_WRITER_SERVICE, useClass: NGXLoggerWriterServiceMock },
                        { provide: TOKEN_LOGGER_SERVER_SERVICE, useClass: NGXLoggerServerServiceMock },
                        { provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLXRlc3RpbmcubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vdGVzdGluZy9zcmMvbGliL2xvZ2dlci10ZXN0aW5nLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxtQkFBbUIsRUFBRSxrQ0FBa0MsRUFBRSwyQkFBMkIsRUFBRSw2QkFBNkIsRUFBRSwwQkFBMEIsRUFBRSwyQkFBMkIsRUFBRSwyQkFBMkIsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN4UyxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUNoRixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdEQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbkUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbkUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBaUJuRSxNQUFNLE9BQU8sbUJBQW1COztzSkFBbkIsbUJBQW1CO3VKQUFuQixtQkFBbUIsWUFicEIsWUFBWTt1SkFhWCxtQkFBbUIsYUFabkI7UUFDVCxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRTtRQUMvQyxFQUFFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsRUFBRSxLQUFLLEVBQUUsY0FBYyxDQUFDLEtBQUssRUFBRSxFQUFFO1FBQzNFLEVBQUUsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLFFBQVEsRUFBRSxnQ0FBZ0MsRUFBRTtRQUMzRixFQUFFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxRQUFRLEVBQUUsNEJBQTRCLEVBQUU7UUFDbEYsRUFBRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsUUFBUSxFQUFFLHlCQUF5QixFQUFFO1FBQzVFLEVBQUUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLFFBQVEsRUFBRSwwQkFBMEIsRUFBRTtRQUM5RSxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUU7UUFDOUUsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFO1FBQzlFLEVBQUUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLFFBQVEsRUFBRSwwQkFBMEIsRUFBRTtLQUMxRSxZQVhRLENBQUMsWUFBWSxDQUFDOzJGQWFaLG1CQUFtQjtrQkFkL0IsUUFBUTttQkFBQztvQkFDUixPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUM7b0JBQ3ZCLFNBQVMsRUFBRTt3QkFDVCxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRTt3QkFDL0MsRUFBRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLEVBQUUsS0FBSyxFQUFFLGNBQWMsQ0FBQyxLQUFLLEVBQUUsRUFBRTt3QkFDM0UsRUFBRSxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsUUFBUSxFQUFFLGdDQUFnQyxFQUFFO3dCQUMzRixFQUFFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxRQUFRLEVBQUUsNEJBQTRCLEVBQUU7d0JBQ2xGLEVBQUUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLFFBQVEsRUFBRSx5QkFBeUIsRUFBRTt3QkFDNUUsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFO3dCQUM5RSxFQUFFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxRQUFRLEVBQUUsMEJBQTBCLEVBQUU7d0JBQzlFLEVBQUUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLFFBQVEsRUFBRSwwQkFBMEIsRUFBRTt3QkFDOUUsRUFBRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFO3FCQUMxRTtpQkFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEN1c3RvbU5HWExvZ2dlclNlcnZpY2UsIExvZ2dlck1vZHVsZSwgTkdYTG9nZ2VyLCBOZ3hMb2dnZXJMZXZlbCwgVE9LRU5fTE9HR0VSX0NPTkZJRywgVE9LRU5fTE9HR0VSX0NPTkZJR19FTkdJTkVfRkFDVE9SWSwgVE9LRU5fTE9HR0VSX01BUFBFUl9TRVJWSUNFLCBUT0tFTl9MT0dHRVJfTUVUQURBVEFfU0VSVklDRSwgVE9LRU5fTE9HR0VSX1JVTEVTX1NFUlZJQ0UsIFRPS0VOX0xPR0dFUl9TRVJWRVJfU0VSVklDRSwgVE9LRU5fTE9HR0VSX1dSSVRFUl9TRVJWSUNFIH0gZnJvbSAnbmd4LWxvZ2dlcic7XHJcbmltcG9ydCB7IE5HWExvZ2dlckNvbmZpZ0VuZ2luZUZhY3RvcnlNb2NrIH0gZnJvbSAnLi9jb25maWctZW5naW5lLWZhY3RvcnkubW9jayc7XHJcbmltcG9ydCB7IEN1c3RvbU5HWExvZ2dlclNlcnZpY2VNb2NrIH0gZnJvbSAnLi9jdXN0b20tbG9nZ2VyLnNlcnZpY2UubW9jayc7XHJcbmltcG9ydCB7IE5HWExvZ2dlck1vY2sgfSBmcm9tICcuL2xvZ2dlci5zZXJ2aWNlLm1vY2snO1xyXG5pbXBvcnQgeyBOR1hMb2dnZXJNYXBwZXJTZXJ2aWNlTW9jayB9IGZyb20gJy4vbWFwcGVyLnNlcnZpY2UubW9jayc7XHJcbmltcG9ydCB7IE5HWExvZ2dlck1ldGFkYXRhU2VydmljZU1vY2sgfSBmcm9tICcuL21ldGFkYXRhLnNlcnZpY2UubW9jayc7XHJcbmltcG9ydCB7IE5HWExvZ2dlclJ1bGVzU2VydmljZU1vY2sgfSBmcm9tICcuL3J1bGVzLnNlcnZpY2UubW9jayc7XHJcbmltcG9ydCB7IE5HWExvZ2dlclNlcnZlclNlcnZpY2VNb2NrIH0gZnJvbSAnLi9zZXJ2ZXIuc2VydmljZS5tb2NrJztcclxuaW1wb3J0IHsgTkdYTG9nZ2VyV3JpdGVyU2VydmljZU1vY2sgfSBmcm9tICcuL3dyaXRlci5zZXJ2aWNlLm1vY2snO1xyXG5cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW0xvZ2dlck1vZHVsZV0sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICB7IHByb3ZpZGU6IE5HWExvZ2dlciwgdXNlQ2xhc3M6IE5HWExvZ2dlck1vY2sgfSxcclxuICAgIHsgcHJvdmlkZTogVE9LRU5fTE9HR0VSX0NPTkZJRywgdXNlVmFsdWU6IHsgbGV2ZWw6IE5neExvZ2dlckxldmVsLkVSUk9SIH0gfSxcclxuICAgIHsgcHJvdmlkZTogVE9LRU5fTE9HR0VSX0NPTkZJR19FTkdJTkVfRkFDVE9SWSwgdXNlQ2xhc3M6IE5HWExvZ2dlckNvbmZpZ0VuZ2luZUZhY3RvcnlNb2NrIH0sXHJcbiAgICB7IHByb3ZpZGU6IFRPS0VOX0xPR0dFUl9NRVRBREFUQV9TRVJWSUNFLCB1c2VDbGFzczogTkdYTG9nZ2VyTWV0YWRhdGFTZXJ2aWNlTW9jayB9LFxyXG4gICAgeyBwcm92aWRlOiBUT0tFTl9MT0dHRVJfUlVMRVNfU0VSVklDRSwgdXNlQ2xhc3M6IE5HWExvZ2dlclJ1bGVzU2VydmljZU1vY2sgfSxcclxuICAgIHsgcHJvdmlkZTogVE9LRU5fTE9HR0VSX01BUFBFUl9TRVJWSUNFLCB1c2VDbGFzczogTkdYTG9nZ2VyTWFwcGVyU2VydmljZU1vY2sgfSxcclxuICAgIHsgcHJvdmlkZTogVE9LRU5fTE9HR0VSX1dSSVRFUl9TRVJWSUNFLCB1c2VDbGFzczogTkdYTG9nZ2VyV3JpdGVyU2VydmljZU1vY2sgfSxcclxuICAgIHsgcHJvdmlkZTogVE9LRU5fTE9HR0VSX1NFUlZFUl9TRVJWSUNFLCB1c2VDbGFzczogTkdYTG9nZ2VyU2VydmVyU2VydmljZU1vY2sgfSxcclxuICAgIHsgcHJvdmlkZTogQ3VzdG9tTkdYTG9nZ2VyU2VydmljZSwgdXNlQ2xhc3M6IEN1c3RvbU5HWExvZ2dlclNlcnZpY2VNb2NrIH0sXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTG9nZ2VyVGVzdGluZ01vZHVsZSB7IH1cclxuIl19