import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class NGXLoggerRulesService {
    shouldCallWriter(level, config, message, additional) {
        return !config.disableConsoleLogging && level >= config.level;
    }
    shouldCallServer(level, config, message, additional) {
        return !!config.serverLoggingUrl && level >= config.serverLogLevel;
    }
    shouldCallMonitor(level, config, message, additional) {
        // The default behavior is to call the monitor only if the writer or the server is called
        return this.shouldCallWriter(level, config, message, additional) || this.shouldCallServer(level, config, message, additional);
    }
}
/** @nocollapse */ /** @nocollapse */ NGXLoggerRulesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerRulesService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ /** @nocollapse */ NGXLoggerRulesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerRulesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerRulesService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZXMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvcnVsZXMvcnVsZXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU0zQyxNQUFNLE9BQU8scUJBQXFCO0lBRXpCLGdCQUFnQixDQUFDLEtBQXFCLEVBQUUsTUFBd0IsRUFBRSxPQUFhLEVBQUUsVUFBa0I7UUFDeEcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsSUFBSSxLQUFLLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQztJQUNoRSxDQUFDO0lBRU0sZ0JBQWdCLENBQUMsS0FBcUIsRUFBRSxNQUF3QixFQUFFLE9BQWEsRUFBRSxVQUFrQjtRQUN4RyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLElBQUksS0FBSyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDckUsQ0FBQztJQUVNLGlCQUFpQixDQUFDLEtBQXFCLEVBQUUsTUFBd0IsRUFBRSxPQUFhLEVBQUUsVUFBa0I7UUFDekcseUZBQXlGO1FBQ3pGLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsQ0FBQyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztJQUNoSSxDQUFDOzt3SkFiVSxxQkFBcUI7NEpBQXJCLHFCQUFxQjsyRkFBckIscUJBQXFCO2tCQURqQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ3hMb2dnZXJMZXZlbCB9IGZyb20gJy4uL3R5cGVzL2xvZ2dlci1sZXZlbC5lbnVtJztcclxuaW1wb3J0IHsgSU5HWExvZ2dlckNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9pY29uZmlnJztcclxuaW1wb3J0IHsgSU5HWExvZ2dlclJ1bGVzU2VydmljZSB9IGZyb20gJy4vaXJ1bGVzLnNlcnZpY2UnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTkdYTG9nZ2VyUnVsZXNTZXJ2aWNlIGltcGxlbWVudHMgSU5HWExvZ2dlclJ1bGVzU2VydmljZSB7XHJcblxyXG4gIHB1YmxpYyBzaG91bGRDYWxsV3JpdGVyKGxldmVsOiBOZ3hMb2dnZXJMZXZlbCwgY29uZmlnOiBJTkdYTG9nZ2VyQ29uZmlnLCBtZXNzYWdlPzogYW55LCBhZGRpdGlvbmFsPzogYW55W10pOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhY29uZmlnLmRpc2FibGVDb25zb2xlTG9nZ2luZyAmJiBsZXZlbCA+PSBjb25maWcubGV2ZWw7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2hvdWxkQ2FsbFNlcnZlcihsZXZlbDogTmd4TG9nZ2VyTGV2ZWwsIGNvbmZpZzogSU5HWExvZ2dlckNvbmZpZywgbWVzc2FnZT86IGFueSwgYWRkaXRpb25hbD86IGFueVtdKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gISFjb25maWcuc2VydmVyTG9nZ2luZ1VybCAmJiBsZXZlbCA+PSBjb25maWcuc2VydmVyTG9nTGV2ZWw7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2hvdWxkQ2FsbE1vbml0b3IobGV2ZWw6IE5neExvZ2dlckxldmVsLCBjb25maWc6IElOR1hMb2dnZXJDb25maWcsIG1lc3NhZ2U/OiBhbnksIGFkZGl0aW9uYWw/OiBhbnlbXSk6IGJvb2xlYW4ge1xyXG4gICAgLy8gVGhlIGRlZmF1bHQgYmVoYXZpb3IgaXMgdG8gY2FsbCB0aGUgbW9uaXRvciBvbmx5IGlmIHRoZSB3cml0ZXIgb3IgdGhlIHNlcnZlciBpcyBjYWxsZWRcclxuICAgIHJldHVybiB0aGlzLnNob3VsZENhbGxXcml0ZXIobGV2ZWwsIGNvbmZpZywgbWVzc2FnZSwgYWRkaXRpb25hbCkgfHwgdGhpcy5zaG91bGRDYWxsU2VydmVyKGxldmVsLCBjb25maWcsIG1lc3NhZ2UsIGFkZGl0aW9uYWwpO1xyXG4gIH1cclxufVxyXG4iXX0=