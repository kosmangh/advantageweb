import { Inject, Injectable } from '@angular/core';
import { NGXLogger } from './logger.service';
import { TOKEN_LOGGER_MAPPER_SERVICE } from './mapper/imapper.service';
import { TOKEN_LOGGER_METADATA_SERVICE } from './metadata/imetadata.service';
import { TOKEN_LOGGER_RULES_SERVICE } from './rules/irules.service';
import { TOKEN_LOGGER_SERVER_SERVICE } from './server/iserver.service';
import { TOKEN_LOGGER_WRITER_SERVICE } from './writer/iwriter.service';
import { TOKEN_LOGGER_CONFIG_ENGINE_FACTORY } from './config/iconfig-engine-factory';
import * as i0 from "@angular/core";
import * as i1 from "./logger.service";
/**
 * CustomNGXLoggerService is designed to allow users to get a new instance of a logger
 */
export class CustomNGXLoggerService {
    constructor(logger, configEngineFactory, metadataService, ruleService, mapperService, writerService, serverService) {
        this.logger = logger;
        this.configEngineFactory = configEngineFactory;
        this.metadataService = metadataService;
        this.ruleService = ruleService;
        this.mapperService = mapperService;
        this.writerService = writerService;
        this.serverService = serverService;
    }
    /**
     * Create an instance of a logger
     * @deprecated this function does not have all the features, @see getNewInstance for every params available
     * @param config
     * @param serverService
     * @param logMonitor
     * @param mapperService
     * @returns
     */
    create(config, serverService, logMonitor, mapperService) {
        return this.getNewInstance({
            config,
            serverService,
            logMonitor,
            mapperService
        });
    }
    /**
     * Get a new instance of NGXLogger
     * @param params list of optional params to use when creating an instance of NGXLogger
     * @returns the new instance of NGXLogger
     */
    getNewInstance(params) {
        const logger = new NGXLogger(params?.config ?? this.logger.getConfigSnapshot(), params?.configEngineFactory ?? this.configEngineFactory, params?.metadataService ?? this.metadataService, params?.ruleService ?? this.ruleService, params?.mapperService ?? this.mapperService, params?.writerService ?? this.writerService, params?.serverService ?? this.serverService);
        if (params?.partialConfig) {
            logger.partialUpdateConfig(params.partialConfig);
        }
        if (params?.logMonitor) {
            logger.registerMonitor(params.logMonitor);
        }
        return logger;
    }
}
/** @nocollapse */ /** @nocollapse */ CustomNGXLoggerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: CustomNGXLoggerService, deps: [{ token: i1.NGXLogger }, { token: TOKEN_LOGGER_CONFIG_ENGINE_FACTORY }, { token: TOKEN_LOGGER_METADATA_SERVICE }, { token: TOKEN_LOGGER_RULES_SERVICE }, { token: TOKEN_LOGGER_MAPPER_SERVICE }, { token: TOKEN_LOGGER_WRITER_SERVICE }, { token: TOKEN_LOGGER_SERVER_SERVICE }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ /** @nocollapse */ CustomNGXLoggerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: CustomNGXLoggerService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: CustomNGXLoggerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.NGXLogger }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TOKEN_LOGGER_CONFIG_ENGINE_FACTORY]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TOKEN_LOGGER_METADATA_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TOKEN_LOGGER_RULES_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TOKEN_LOGGER_MAPPER_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TOKEN_LOGGER_WRITER_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TOKEN_LOGGER_SERVER_SERVICE]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLWxvZ2dlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9jdXN0b20tbG9nZ2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzdDLE9BQU8sRUFBRSwyQkFBMkIsRUFBMkIsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRyxPQUFPLEVBQUUsNkJBQTZCLEVBQTZCLE1BQU0sOEJBQThCLENBQUM7QUFDeEcsT0FBTyxFQUFFLDBCQUEwQixFQUEwQixNQUFNLHdCQUF3QixDQUFDO0FBQzVGLE9BQU8sRUFBRSwyQkFBMkIsRUFBMkIsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRyxPQUFPLEVBQUUsMkJBQTJCLEVBQTJCLE1BQU0sMEJBQTBCLENBQUM7QUFFaEcsT0FBTyxFQUFpQyxrQ0FBa0MsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7QUFFcEg7O0dBRUc7QUFJSCxNQUFNLE9BQU8sc0JBQXNCO0lBRWpDLFlBQ1UsTUFBaUIsRUFDMkIsbUJBQWtELEVBQ3ZELGVBQTBDLEVBQzdDLFdBQW1DLEVBQ2xDLGFBQXNDLEVBQ3RDLGFBQXNDLEVBQ3RDLGFBQXNDO1FBTjNFLFdBQU0sR0FBTixNQUFNLENBQVc7UUFDMkIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUErQjtRQUN2RCxvQkFBZSxHQUFmLGVBQWUsQ0FBMkI7UUFDN0MsZ0JBQVcsR0FBWCxXQUFXLENBQXdCO1FBQ2xDLGtCQUFhLEdBQWIsYUFBYSxDQUF5QjtRQUN0QyxrQkFBYSxHQUFiLGFBQWEsQ0FBeUI7UUFDdEMsa0JBQWEsR0FBYixhQUFhLENBQXlCO0lBQ2pGLENBQUM7SUFHTDs7Ozs7Ozs7T0FRRztJQUNILE1BQU0sQ0FDSixNQUF3QixFQUN4QixhQUF1QyxFQUN2QyxVQUE4QixFQUM5QixhQUF1QztRQUV2QyxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7WUFDekIsTUFBTTtZQUNOLGFBQWE7WUFDYixVQUFVO1lBQ1YsYUFBYTtTQUNkLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsY0FBYyxDQUNaLE1BVUM7UUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLFNBQVMsQ0FDMUIsTUFBTSxFQUFFLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLEVBQ2pELE1BQU0sRUFBRSxtQkFBbUIsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQ3ZELE1BQU0sRUFBRSxlQUFlLElBQUksSUFBSSxDQUFDLGVBQWUsRUFDL0MsTUFBTSxFQUFFLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUN2QyxNQUFNLEVBQUUsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQzNDLE1BQU0sRUFBRSxhQUFhLElBQUksSUFBSSxDQUFDLGFBQWEsRUFDM0MsTUFBTSxFQUFFLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUM1QyxDQUFDO1FBRUYsSUFBSSxNQUFNLEVBQUUsYUFBYSxFQUFFO1lBQ3pCLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDbEQ7UUFFRCxJQUFJLE1BQU0sRUFBRSxVQUFVLEVBQUU7WUFDdEIsTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDM0M7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDOzt5SkF6RVUsc0JBQXNCLDJDQUl2QixrQ0FBa0MsYUFDbEMsNkJBQTZCLGFBQzdCLDBCQUEwQixhQUMxQiwyQkFBMkIsYUFDM0IsMkJBQTJCLGFBQzNCLDJCQUEyQjs2SkFUMUIsc0JBQXNCLGNBRnJCLE1BQU07MkZBRVAsc0JBQXNCO2tCQUhsQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7MEJBS0ksTUFBTTsyQkFBQyxrQ0FBa0M7OzBCQUN6QyxNQUFNOzJCQUFDLDZCQUE2Qjs7MEJBQ3BDLE1BQU07MkJBQUMsMEJBQTBCOzswQkFDakMsTUFBTTsyQkFBQywyQkFBMkI7OzBCQUNsQyxNQUFNOzJCQUFDLDJCQUEyQjs7MEJBQ2xDLE1BQU07MkJBQUMsMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IElOR1hMb2dnZXJDb25maWcgfSBmcm9tICcuL2NvbmZpZy9pY29uZmlnJztcclxuaW1wb3J0IHsgTkdYTG9nZ2VyIH0gZnJvbSAnLi9sb2dnZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IFRPS0VOX0xPR0dFUl9NQVBQRVJfU0VSVklDRSwgSU5HWExvZ2dlck1hcHBlclNlcnZpY2UgfSBmcm9tICcuL21hcHBlci9pbWFwcGVyLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBUT0tFTl9MT0dHRVJfTUVUQURBVEFfU0VSVklDRSwgSU5HWExvZ2dlck1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4vbWV0YWRhdGEvaW1ldGFkYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBUT0tFTl9MT0dHRVJfUlVMRVNfU0VSVklDRSwgSU5HWExvZ2dlclJ1bGVzU2VydmljZSB9IGZyb20gJy4vcnVsZXMvaXJ1bGVzLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBUT0tFTl9MT0dHRVJfU0VSVkVSX1NFUlZJQ0UsIElOR1hMb2dnZXJTZXJ2ZXJTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2ZXIvaXNlcnZlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVE9LRU5fTE9HR0VSX1dSSVRFUl9TRVJWSUNFLCBJTkdYTG9nZ2VyV3JpdGVyU2VydmljZSB9IGZyb20gJy4vd3JpdGVyL2l3cml0ZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IElOR1hMb2dnZXJNb25pdG9yIH0gZnJvbSAnLi9tb25pdG9yL2lsb2dnZXItbW9uaXRvcic7XHJcbmltcG9ydCB7IElOR1hMb2dnZXJDb25maWdFbmdpbmVGYWN0b3J5LCBUT0tFTl9MT0dHRVJfQ09ORklHX0VOR0lORV9GQUNUT1JZIH0gZnJvbSAnLi9jb25maWcvaWNvbmZpZy1lbmdpbmUtZmFjdG9yeSc7XHJcblxyXG4vKipcclxuICogQ3VzdG9tTkdYTG9nZ2VyU2VydmljZSBpcyBkZXNpZ25lZCB0byBhbGxvdyB1c2VycyB0byBnZXQgYSBuZXcgaW5zdGFuY2Ugb2YgYSBsb2dnZXJcclxuICovXHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEN1c3RvbU5HWExvZ2dlclNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgbG9nZ2VyOiBOR1hMb2dnZXIsXHJcbiAgICBASW5qZWN0KFRPS0VOX0xPR0dFUl9DT05GSUdfRU5HSU5FX0ZBQ1RPUlkpIHByaXZhdGUgY29uZmlnRW5naW5lRmFjdG9yeTogSU5HWExvZ2dlckNvbmZpZ0VuZ2luZUZhY3RvcnksXHJcbiAgICBASW5qZWN0KFRPS0VOX0xPR0dFUl9NRVRBREFUQV9TRVJWSUNFKSBwcml2YXRlIG1ldGFkYXRhU2VydmljZTogSU5HWExvZ2dlck1ldGFkYXRhU2VydmljZSxcclxuICAgIEBJbmplY3QoVE9LRU5fTE9HR0VSX1JVTEVTX1NFUlZJQ0UpIHByaXZhdGUgcnVsZVNlcnZpY2U6IElOR1hMb2dnZXJSdWxlc1NlcnZpY2UsXHJcbiAgICBASW5qZWN0KFRPS0VOX0xPR0dFUl9NQVBQRVJfU0VSVklDRSkgcHJpdmF0ZSBtYXBwZXJTZXJ2aWNlOiBJTkdYTG9nZ2VyTWFwcGVyU2VydmljZSxcclxuICAgIEBJbmplY3QoVE9LRU5fTE9HR0VSX1dSSVRFUl9TRVJWSUNFKSBwcml2YXRlIHdyaXRlclNlcnZpY2U6IElOR1hMb2dnZXJXcml0ZXJTZXJ2aWNlLFxyXG4gICAgQEluamVjdChUT0tFTl9MT0dHRVJfU0VSVkVSX1NFUlZJQ0UpIHByaXZhdGUgc2VydmVyU2VydmljZTogSU5HWExvZ2dlclNlcnZlclNlcnZpY2UsXHJcbiAgKSB7IH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBhIGxvZ2dlclxyXG4gICAqIEBkZXByZWNhdGVkIHRoaXMgZnVuY3Rpb24gZG9lcyBub3QgaGF2ZSBhbGwgdGhlIGZlYXR1cmVzLCBAc2VlIGdldE5ld0luc3RhbmNlIGZvciBldmVyeSBwYXJhbXMgYXZhaWxhYmxlXHJcbiAgICogQHBhcmFtIGNvbmZpZyBcclxuICAgKiBAcGFyYW0gc2VydmVyU2VydmljZSBcclxuICAgKiBAcGFyYW0gbG9nTW9uaXRvciBcclxuICAgKiBAcGFyYW0gbWFwcGVyU2VydmljZSBcclxuICAgKiBAcmV0dXJucyBcclxuICAgKi9cclxuICBjcmVhdGUoXHJcbiAgICBjb25maWc6IElOR1hMb2dnZXJDb25maWcsXHJcbiAgICBzZXJ2ZXJTZXJ2aWNlPzogSU5HWExvZ2dlclNlcnZlclNlcnZpY2UsXHJcbiAgICBsb2dNb25pdG9yPzogSU5HWExvZ2dlck1vbml0b3IsXHJcbiAgICBtYXBwZXJTZXJ2aWNlPzogSU5HWExvZ2dlck1hcHBlclNlcnZpY2UsXHJcbiAgKTogTkdYTG9nZ2VyIHtcclxuICAgIHJldHVybiB0aGlzLmdldE5ld0luc3RhbmNlKHtcclxuICAgICAgY29uZmlnLFxyXG4gICAgICBzZXJ2ZXJTZXJ2aWNlLFxyXG4gICAgICBsb2dNb25pdG9yLFxyXG4gICAgICBtYXBwZXJTZXJ2aWNlXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBhIG5ldyBpbnN0YW5jZSBvZiBOR1hMb2dnZXJcclxuICAgKiBAcGFyYW0gcGFyYW1zIGxpc3Qgb2Ygb3B0aW9uYWwgcGFyYW1zIHRvIHVzZSB3aGVuIGNyZWF0aW5nIGFuIGluc3RhbmNlIG9mIE5HWExvZ2dlclxyXG4gICAqIEByZXR1cm5zIHRoZSBuZXcgaW5zdGFuY2Ugb2YgTkdYTG9nZ2VyXHJcbiAgICovXHJcbiAgZ2V0TmV3SW5zdGFuY2UoXHJcbiAgICBwYXJhbXM/OiB7XHJcbiAgICAgIGNvbmZpZz86IElOR1hMb2dnZXJDb25maWcsXHJcbiAgICAgIGNvbmZpZ0VuZ2luZUZhY3Rvcnk/OiBJTkdYTG9nZ2VyQ29uZmlnRW5naW5lRmFjdG9yeSxcclxuICAgICAgbWV0YWRhdGFTZXJ2aWNlPzogSU5HWExvZ2dlck1ldGFkYXRhU2VydmljZSxcclxuICAgICAgcnVsZVNlcnZpY2U/OiBJTkdYTG9nZ2VyUnVsZXNTZXJ2aWNlLFxyXG4gICAgICBtYXBwZXJTZXJ2aWNlPzogSU5HWExvZ2dlck1hcHBlclNlcnZpY2UsXHJcbiAgICAgIHdyaXRlclNlcnZpY2U/OiBJTkdYTG9nZ2VyV3JpdGVyU2VydmljZSxcclxuICAgICAgc2VydmVyU2VydmljZT86IElOR1hMb2dnZXJTZXJ2ZXJTZXJ2aWNlLFxyXG4gICAgICBsb2dNb25pdG9yPzogSU5HWExvZ2dlck1vbml0b3IsXHJcbiAgICAgIHBhcnRpYWxDb25maWc/OiBQYXJ0aWFsPElOR1hMb2dnZXJDb25maWc+LFxyXG4gICAgfVxyXG4gICk6IE5HWExvZ2dlciB7XHJcbiAgICBjb25zdCBsb2dnZXIgPSBuZXcgTkdYTG9nZ2VyKFxyXG4gICAgICBwYXJhbXM/LmNvbmZpZyA/PyB0aGlzLmxvZ2dlci5nZXRDb25maWdTbmFwc2hvdCgpLFxyXG4gICAgICBwYXJhbXM/LmNvbmZpZ0VuZ2luZUZhY3RvcnkgPz8gdGhpcy5jb25maWdFbmdpbmVGYWN0b3J5LFxyXG4gICAgICBwYXJhbXM/Lm1ldGFkYXRhU2VydmljZSA/PyB0aGlzLm1ldGFkYXRhU2VydmljZSxcclxuICAgICAgcGFyYW1zPy5ydWxlU2VydmljZSA/PyB0aGlzLnJ1bGVTZXJ2aWNlLFxyXG4gICAgICBwYXJhbXM/Lm1hcHBlclNlcnZpY2UgPz8gdGhpcy5tYXBwZXJTZXJ2aWNlLFxyXG4gICAgICBwYXJhbXM/LndyaXRlclNlcnZpY2UgPz8gdGhpcy53cml0ZXJTZXJ2aWNlLFxyXG4gICAgICBwYXJhbXM/LnNlcnZlclNlcnZpY2UgPz8gdGhpcy5zZXJ2ZXJTZXJ2aWNlXHJcbiAgICApO1xyXG5cclxuICAgIGlmIChwYXJhbXM/LnBhcnRpYWxDb25maWcpIHtcclxuICAgICAgbG9nZ2VyLnBhcnRpYWxVcGRhdGVDb25maWcocGFyYW1zLnBhcnRpYWxDb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChwYXJhbXM/LmxvZ01vbml0b3IpIHtcclxuICAgICAgbG9nZ2VyLnJlZ2lzdGVyTW9uaXRvcihwYXJhbXMubG9nTW9uaXRvcik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGxvZ2dlcjtcclxuICB9XHJcbn1cclxuXHJcblxyXG4iXX0=