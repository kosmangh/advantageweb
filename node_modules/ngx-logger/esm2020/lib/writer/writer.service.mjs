import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { NgxLoggerLevel } from '../types/logger-level.enum';
import { DEFAULT_COLOR_SCHEME } from './color-scheme';
import * as i0 from "@angular/core";
export class NGXLoggerWriterService {
    constructor(platformId) {
        this.platformId = platformId;
        /** List of functions called when preparing meta string */
        this.prepareMetaStringFuncs = [
            this.getTimestampToWrite,
            this.getLevelToWrite,
            this.getFileDetailsToWrite,
            this.getContextToWrite,
        ];
        this.isIE = isPlatformBrowser(platformId) && navigator && navigator.userAgent &&
            !!(navigator.userAgent.indexOf('MSIE') !== -1 || navigator.userAgent.match(/Trident\//) || navigator.userAgent.match(/Edge\//));
        this.logFunc = this.isIE ? this.logIE.bind(this) : this.logModern.bind(this);
    }
    getTimestampToWrite(metadata, config) {
        return metadata.timestamp;
    }
    getLevelToWrite(metadata, config) {
        return NgxLoggerLevel[metadata.level];
    }
    getFileDetailsToWrite(metadata, config) {
        return config.disableFileDetails === true ? '' : `[${metadata.fileName}:${metadata.lineNumber}:${metadata.columnNumber}]`;
    }
    getContextToWrite(metadata, config) {
        return config.context ? `{${config.context}}` : '';
    }
    /** Generate a "meta" string that is displayed before the content sent to the log function */
    prepareMetaString(metadata, config) {
        let metaString = '';
        this.prepareMetaStringFuncs.forEach(prepareMetaStringFunc => {
            const metaItem = prepareMetaStringFunc(metadata, config);
            if (metaItem) {
                metaString = metaString + ' ' + metaItem;
            }
        });
        return metaString.trim();
    }
    /** Get the color to use when writing to console */
    getColor(metadata, config) {
        const configColorScheme = config.colorScheme ?? DEFAULT_COLOR_SCHEME;
        // this is needed to avoid a build error
        if (metadata.level === NgxLoggerLevel.OFF) {
            return undefined;
        }
        return configColorScheme[metadata.level];
    }
    /** Log to the console specifically for IE */
    logIE(metadata, config, metaString) {
        // Coloring doesn't work in IE
        // make sure additional isn't null or undefined so that ...additional doesn't error
        const additional = metadata.additional || [];
        switch (metadata.level) {
            case NgxLoggerLevel.WARN:
                console.warn(`${metaString} `, metadata.message, ...additional);
                break;
            case NgxLoggerLevel.ERROR:
            case NgxLoggerLevel.FATAL:
                console.error(`${metaString} `, metadata.message, ...additional);
                break;
            case NgxLoggerLevel.INFO:
                console.info(`${metaString} `, metadata.message, ...additional);
                break;
            default:
                console.log(`${metaString} `, metadata.message, ...additional);
        }
    }
    /** Log to the console */
    logModern(metadata, config, metaString) {
        const color = this.getColor(metadata, config);
        // make sure additional isn't null or undefined so that ...additional doesn't error
        const additional = metadata.additional || [];
        switch (metadata.level) {
            case NgxLoggerLevel.WARN:
                console.warn(`%c${metaString}`, `color:${color}`, metadata.message, ...additional);
                break;
            case NgxLoggerLevel.ERROR:
            case NgxLoggerLevel.FATAL:
                console.error(`%c${metaString}`, `color:${color}`, metadata.message, ...additional);
                break;
            case NgxLoggerLevel.INFO:
                console.info(`%c${metaString}`, `color:${color}`, metadata.message, ...additional);
                break;
            //  Disabling console.trace since the stack trace is not helpful. it is showing the stack trace of
            // the console.trace statement
            // case NgxLoggerLevel.TRACE:
            //   console.trace(`%c${metaString}`, `color:${color}`, message, ...additional);
            //   break;
            case NgxLoggerLevel.DEBUG:
                console.debug(`%c${metaString}`, `color:${color}`, metadata.message, ...additional);
                break;
            default:
                console.log(`%c${metaString}`, `color:${color}`, metadata.message, ...additional);
        }
    }
    /** Write the content sent to the log function to the console */
    writeMessage(metadata, config) {
        const metaString = this.prepareMetaString(metadata, config);
        this.logFunc(metadata, config, metaString);
    }
}
/** @nocollapse */ /** @nocollapse */ NGXLoggerWriterService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerWriterService, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ /** @nocollapse */ NGXLoggerWriterService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerWriterService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerWriterService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,