import { Inject, Injectable } from '@angular/core';
import { NgxLoggerLevel } from './types/logger-level.enum';
import { TOKEN_LOGGER_CONFIG } from './config/iconfig';
import { TOKEN_LOGGER_METADATA_SERVICE } from './metadata/imetadata.service';
import { TOKEN_LOGGER_RULES_SERVICE } from './rules/irules.service';
import { TOKEN_LOGGER_MAPPER_SERVICE } from './mapper/imapper.service';
import { TOKEN_LOGGER_WRITER_SERVICE } from './writer/iwriter.service';
import { TOKEN_LOGGER_SERVER_SERVICE } from './server/iserver.service';
import { take } from 'rxjs/operators';
import { TOKEN_LOGGER_CONFIG_ENGINE_FACTORY } from './config/iconfig-engine-factory';
import * as i0 from "@angular/core";
export class NGXLogger {
    constructor(config, configEngineFactory, metadataService, ruleService, mapperService, writerService, serverService) {
        this.metadataService = metadataService;
        this.ruleService = ruleService;
        this.mapperService = mapperService;
        this.writerService = writerService;
        this.serverService = serverService;
        this.configEngine = configEngineFactory.provideConfigEngine(config);
    }
    /** Get a readonly access to the level configured for the NGXLogger */
    get level() {
        return this.configEngine.level;
    }
    /** Get a readonly access to the serverLogLevel configured for the NGXLogger */
    get serverLogLevel() {
        return this.configEngine.serverLogLevel;
    }
    trace(message, ...additional) {
        this._log(NgxLoggerLevel.TRACE, message, additional);
    }
    debug(message, ...additional) {
        this._log(NgxLoggerLevel.DEBUG, message, additional);
    }
    info(message, ...additional) {
        this._log(NgxLoggerLevel.INFO, message, additional);
    }
    log(message, ...additional) {
        this._log(NgxLoggerLevel.LOG, message, additional);
    }
    warn(message, ...additional) {
        this._log(NgxLoggerLevel.WARN, message, additional);
    }
    error(message, ...additional) {
        this._log(NgxLoggerLevel.ERROR, message, additional);
    }
    fatal(message, ...additional) {
        this._log(NgxLoggerLevel.FATAL, message, additional);
    }
    /** @deprecated customHttpHeaders is now part of the config, this should be updated via @see updateConfig */
    setCustomHttpHeaders(headers) {
        const config = this.getConfigSnapshot();
        config.customHttpHeaders = headers;
        this.updateConfig(config);
    }
    /** @deprecated customHttpParams is now part of the config, this should be updated via @see updateConfig */
    setCustomParams(params) {
        const config = this.getConfigSnapshot();
        config.customHttpParams = params;
        this.updateConfig(config);
    }
    /** @deprecated withCredentials is now part of the config, this should be updated via @see updateConfig */
    setWithCredentialsOptionValue(withCredentials) {
        const config = this.getConfigSnapshot();
        config.withCredentials = withCredentials;
        this.updateConfig(config);
    }
    /**
     * Register a INGXLoggerMonitor that will be trigger when a log is either written or sent to server
     *
     * There is only one monitor, registering one will overwrite the last one if there was one
     * @param monitor
     */
    registerMonitor(monitor) {
        this._loggerMonitor = monitor;
    }
    /** Set config of logger
     *
     * Warning : This overwrites all the config, if you want to update only one property, you should use @see getConfigSnapshot before
     */
    updateConfig(config) {
        this.configEngine.updateConfig(config);
    }
    partialUpdateConfig(partialConfig) {
        this.configEngine.partialUpdateConfig(partialConfig);
    }
    /** Get config of logger */
    getConfigSnapshot() {
        return this.configEngine.getConfig();
    }
    /**
     * Flush the serveur queue
     */
    flushServerQueue() {
        this.serverService.flushQueue(this.getConfigSnapshot());
    }
    _log(level, message, additional = []) {
        const config = this.configEngine.getConfig();
        const shouldCallWriter = this.ruleService.shouldCallWriter(level, config, message, additional);
        const shouldCallServer = this.ruleService.shouldCallServer(level, config, message, additional);
        const shouldCallMonitor = this.ruleService.shouldCallMonitor(level, config, message, additional);
        if (!shouldCallWriter && !shouldCallServer && !shouldCallMonitor) {
            // If nothing is to be called we return
            return;
        }
        const metadata = this.metadataService.getMetadata(level, config, message, additional);
        this.mapperService.getLogPosition(config, metadata).pipe(take(1)).subscribe(logPosition => {
            if (logPosition) {
                metadata.fileName = logPosition.fileName;
                metadata.lineNumber = logPosition.lineNumber;
                metadata.columnNumber = logPosition.columnNumber;
            }
            if (shouldCallMonitor && this._loggerMonitor) {
                this._loggerMonitor.onLog(metadata, config);
            }
            if (shouldCallWriter) {
                this.writerService.writeMessage(metadata, config);
            }
            if (shouldCallServer) {
                this.serverService.sendToServer(metadata, config);
            }
        });
    }
}
/** @nocollapse */ /** @nocollapse */ NGXLogger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLogger, deps: [{ token: TOKEN_LOGGER_CONFIG }, { token: TOKEN_LOGGER_CONFIG_ENGINE_FACTORY }, { token: TOKEN_LOGGER_METADATA_SERVICE }, { token: TOKEN_LOGGER_RULES_SERVICE }, { token: TOKEN_LOGGER_MAPPER_SERVICE }, { token: TOKEN_LOGGER_WRITER_SERVICE }, { token: TOKEN_LOGGER_SERVER_SERVICE }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ /** @nocollapse */ NGXLogger.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLogger, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLogger, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TOKEN_LOGGER_CONFIG]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TOKEN_LOGGER_CONFIG_ENGINE_FACTORY]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TOKEN_LOGGER_METADATA_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TOKEN_LOGGER_RULES_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TOKEN_LOGGER_MAPPER_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TOKEN_LOGGER_WRITER_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TOKEN_LOGGER_SERVER_SERVICE]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,