import { HttpHeaders, HttpParams, HttpRequest, HttpResponse } from '@angular/common/http';
import { Injectable, Optional } from '@angular/core';
import { BehaviorSubject, isObservable, of, throwError, timer } from 'rxjs';
import { catchError, concatMap, filter, map, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class NGXLoggerServerService {
    constructor(httpBackend, ngZone) {
        this.httpBackend = httpBackend;
        this.ngZone = ngZone;
        this.serverCallsQueue = [];
        this.flushingQueue = new BehaviorSubject(false);
    }
    ngOnDestroy() {
        if (this.flushingQueue) {
            this.flushingQueue.complete();
            this.flushingQueue = null;
        }
        if (this.addToQueueTimer) {
            this.addToQueueTimer.unsubscribe();
            this.addToQueueTimer = null;
        }
    }
    /**
     * Transforms an error object into a readable string (taking only the stack)
     * This is needed because JSON.stringify would return "{}"
     * @param err the error object
     * @returns The stack of the error
     */
    secureErrorObject(err) {
        return err?.stack;
    }
    /**
     * Transforms the additional parameters to avoid any json error when sending the data to the server
     * Basically it just replaces unstringifiable object to a string mentioning an error
     * @param additional The additional data to be sent
     * @returns The additional data secured
     */
    secureAdditionalParameters(additional) {
        if (additional === null || additional === undefined) {
            return null;
        }
        return additional.map((next, idx) => {
            try {
                if (next instanceof Error) {
                    return this.secureErrorObject(next);
                }
                // We just want to make sure the JSON can be parsed, we do not want to actually change the type
                if (typeof next === 'object') {
                    JSON.stringify(next);
                }
                return next;
            }
            catch (e) {
                return `The additional[${idx}] value could not be parsed using JSON.stringify().`;
            }
        });
    }
    /**
     * Transforms the message so that it can be sent to the server
     * @param message the message to be sent
     * @returns the message secured
     */
    secureMessage(message) {
        try {
            if (message instanceof Error) {
                return this.secureErrorObject(message);
            }
            if (typeof message !== 'string') {
                message = JSON.stringify(message, null, 2);
            }
        }
        catch (e) {
            message = 'The provided "message" value could not be parsed with JSON.stringify().';
        }
        return message;
    }
    /**
     * Edits HttpRequest object before sending request to server
     * @param httpRequest default request object
     * @returns altered httprequest
     */
    alterHttpRequest(httpRequest) {
        return httpRequest;
    }
    /**
     * Sends request to server
     * @param url
     * @param logContent
     * @param options
     * @returns
     */
    logOnServer(url, logContent, options) {
        if (!this.httpBackend) {
            console.error('NGXLogger : Can\'t log on server because HttpBackend is not provided. You need to import HttpClientModule');
            return of(null);
        }
        // HttpBackend skips all HttpInterceptors
        // They may log errors using this service causing circular calls
        let defaultRequest = new HttpRequest('POST', url, logContent, options || {});
        let finalRequest = of(defaultRequest);
        const alteredRequest = this.alterHttpRequest(defaultRequest);
        if (isObservable(alteredRequest)) {
            finalRequest = alteredRequest;
        }
        else if (alteredRequest) {
            finalRequest = of(alteredRequest);
        }
        else {
            console.warn('NGXLogger : alterHttpRequest returned an invalid request. Using default one instead');
        }
        return finalRequest.pipe(concatMap(req => {
            if (!req) {
                console.warn('NGXLogger : alterHttpRequest returned an invalid request (observable). Using default one instead');
                return this.httpBackend.handle(defaultRequest);
            }
            return this.httpBackend.handle(req);
        }), filter(e => e instanceof HttpResponse), map((httpResponse) => httpResponse.body));
    }
    /**
     * Customise the data sent to the API
     * @param metadata the data provided by NGXLogger
     * @returns the data that will be sent to the API in the body
     */
    customiseRequestBody(metadata) {
        // In our API the body is not customised
        return metadata;
    }
    /**
     * Flush the queue of the logger
     * @param config
     */
    flushQueue(config) {
        this.flushingQueue.next(true);
        // If a timer was set, we cancel it because the queue is flushed
        if (this.addToQueueTimer) {
            this.addToQueueTimer.unsubscribe();
            this.addToQueueTimer = null;
        }
        if (!!this.serverCallsQueue && this.serverCallsQueue.length > 0) {
            this.sendToServerAction(this.serverCallsQueue, config);
        }
        this.serverCallsQueue = [];
        this.flushingQueue.next(false);
    }
    sendToServerAction(metadata, config) {
        let requestBody;
        const secureMetadata = (pMetadata) => {
            // Copying metadata locally because we don't want to change the object for the caller
            const securedMetadata = { ...pMetadata };
            securedMetadata.additional = this.secureAdditionalParameters(securedMetadata.additional);
            securedMetadata.message = this.secureMessage(securedMetadata.message);
            return securedMetadata;
        };
        if (Array.isArray(metadata)) {
            requestBody = [];
            metadata.forEach(m => {
                requestBody.push(secureMetadata(m));
            });
        }
        else {
            requestBody = secureMetadata(metadata);
        }
        // Allow users to customise the data sent to the API
        requestBody = this.customiseRequestBody(requestBody);
        const headers = config.customHttpHeaders || new HttpHeaders();
        if (!headers.has('Content-Type')) {
            headers.set('Content-Type', 'application/json');
        }
        const logOnServerAction = () => {
            this.logOnServer(config.serverLoggingUrl, requestBody, {
                headers,
                params: config.customHttpParams || new HttpParams(),
                responseType: config.httpResponseType || 'json',
                withCredentials: config.withCredentials || false,
            }).pipe(catchError(err => {
                // Do not use NGXLogger here because this could cause an infinite loop 
                console.error('NGXLogger: Failed to log on server', err);
                return throwError(err);
            })).subscribe();
        };
        if (config.serverCallsOutsideNgZone === true) {
            if (!this.ngZone) {
                console.error('NGXLogger: NgZone is not provided and serverCallsOutsideNgZone is set to true');
                return;
            }
            this.ngZone.runOutsideAngular(logOnServerAction);
        }
        else {
            logOnServerAction();
        }
    }
    /**
     * Sends the content to be logged to the server according to the config
     * @param metadata
     * @param config
     */
    sendToServer(metadata, config) {
        // If there is no batch mode in the config, we send the log call straight to the server as usual
        if ((!config.serverCallsBatchSize || config.serverCallsBatchSize <= 0) &&
            (!config.serverCallsTimer || config.serverCallsTimer <= 0)) {
            this.sendToServerAction(metadata, config);
            return;
        }
        const addLogToQueueAction = () => {
            this.serverCallsQueue.push({ ...metadata });
            // Flush queue when size is reached
            if (!!config.serverCallsBatchSize && this.serverCallsQueue.length > config.serverCallsBatchSize) {
                this.flushQueue(config);
            }
            // Call timer only if it is in the config and timer is not already running
            if (config.serverCallsTimer > 0 && !this.addToQueueTimer) {
                this.addToQueueTimer = timer(config.serverCallsTimer).subscribe(_ => {
                    this.flushQueue(config);
                });
            }
        };
        // If queue is being flushed, we need to wait for it to finish before adding other calls
        if (this.flushingQueue.value === true) {
            this.flushingQueue.pipe(filter(fq => fq === false), take(1)).subscribe(_ => {
                addLogToQueueAction();
            });
        }
        else {
            addLogToQueueAction();
        }
    }
}
/** @nocollapse */ /** @nocollapse */ NGXLoggerServerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerServerService, deps: [{ token: i1.HttpBackend, optional: true }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ /** @nocollapse */ NGXLoggerServerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerServerService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.0.2", ngImport: i0, type: NGXLoggerServerService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpBackend, decorators: [{
                    type: Optional
                }] }, { type: i0.NgZone, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,