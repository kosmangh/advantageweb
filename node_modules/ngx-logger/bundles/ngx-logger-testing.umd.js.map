{"version":3,"file":"ngx-logger-testing.umd.js","sources":["../../../testing/src/lib/config-engine.mock.ts","../../../testing/src/lib/logger.service.mock.ts","../../../testing/src/lib/custom-logger.service.mock.ts","../../../testing/src/lib/config-engine-factory.mock.ts","../../../testing/src/lib/mapper.service.mock.ts","../../../testing/src/lib/metadata.service.mock.ts","../../../testing/src/lib/rules.service.mock.ts","../../../testing/src/lib/server.service.mock.ts","../../../testing/src/lib/writer.service.mock.ts","../../../testing/src/lib/logger-testing.module.ts","../../../testing/src/ngx-logger-testing.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerConfigEngine, NgxLoggerLevel } from 'ngx-logger';\r\n\r\n@Injectable()\r\nexport class NGXLoggerConfigEngineMock implements INGXLoggerConfigEngine {\r\n\r\n  get level(): NgxLoggerLevel {\r\n    return NgxLoggerLevel.ERROR;\r\n  }\r\n\r\n  get serverLogLevel(): NgxLoggerLevel {\r\n    return NgxLoggerLevel.OFF;\r\n  }\r\n\r\n  updateConfig(config: INGXLoggerConfig) {\r\n  }\r\n\r\n  getConfig(): INGXLoggerConfig {\r\n    return { level: NgxLoggerLevel.ERROR };\r\n  }\r\n}\r\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from \"@angular/core\";\r\nimport { INGXLoggerConfig, INGXLoggerMonitor, NgxLoggerLevel } from 'ngx-logger';\r\n\r\n// todo bmtheo, there should be an interface or something to make sure this mock sticks to the real API\r\n@Injectable()\r\nexport class NGXLoggerMock {\r\n\r\n  get level(): NgxLoggerLevel {\r\n    return NgxLoggerLevel.ERROR;\r\n  }\r\n\r\n  get serverLogLevel(): NgxLoggerLevel {\r\n    return NgxLoggerLevel.OFF;\r\n  }\r\n\r\n  trace(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  debug(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  info(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  log(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  warn(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  error(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  fatal(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  updateConfig(config: any) {\r\n\r\n  }\r\n\r\n  setCustomHttpHeaders(headers: HttpHeaders) {\r\n  }\r\n\r\n  setCustomParams(params: HttpParams) {\r\n  }\r\n\r\n  registerMonitor(monitor: INGXLoggerMonitor) {\r\n  }\r\n\r\n  setWithCredentialsOptionValue(withCredentials: boolean) {\r\n  }\r\n\r\n  getConfigSnapshot(): INGXLoggerConfig {\r\n    return { level: NgxLoggerLevel.ERROR };\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { NGXLoggerMock } from \"./logger.service.mock\";\r\n\r\n/**\r\n * CustomNGXLoggerServiceMock is a mock for CustomNGXLoggerService\r\n */\r\n@Injectable()\r\nexport class CustomNGXLoggerServiceMock {\r\n\r\n  create(): NGXLoggerMock {\r\n    return new NGXLoggerMock();\r\n  }\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerConfigEngine, INGXLoggerConfigEngineFactory } from 'ngx-logger';\r\nimport { NGXLoggerConfigEngineMock } from './config-engine.mock';\r\n\r\n@Injectable()\r\nexport class NGXLoggerConfigEngineFactoryMock implements INGXLoggerConfigEngineFactory {\r\n\r\n  provideConfigEngine(config: INGXLoggerConfig): INGXLoggerConfigEngine {\r\n    return new NGXLoggerConfigEngineMock();\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerLogPosition, INGXLoggerMapperService, INGXLoggerMetadata } from 'ngx-logger';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n\r\n@Injectable()\r\nexport class NGXLoggerMapperServiceMock implements INGXLoggerMapperService {\r\n  public getLogPosition(config: INGXLoggerConfig, metadata: INGXLoggerMetadata): Observable<INGXLoggerLogPosition> {\r\n    return of({ fileName: 'test.ts' });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerMetadata, INGXLoggerMetadataService, NgxLoggerLevel } from 'ngx-logger';\r\n\r\n\r\n@Injectable()\r\nexport class NGXLoggerMetadataServiceMock implements INGXLoggerMetadataService {\r\n\r\n  public getMetadata(\r\n    level: NgxLoggerLevel,\r\n    config: INGXLoggerConfig,\r\n    message?: any | (() => any),\r\n    additional?: any[],\r\n  ): INGXLoggerMetadata {\r\n    return {\r\n      level: level\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerRulesService, NgxLoggerLevel } from 'ngx-logger';\r\n\r\n\r\n@Injectable()\r\nexport class NGXLoggerRulesServiceMock implements INGXLoggerRulesService {\r\n\r\n  public shouldCallWriter(level: NgxLoggerLevel, config: INGXLoggerConfig, message?: any, additional?: any[]): boolean {\r\n    return false;\r\n  }\r\n\r\n  public shouldCallServer(level: NgxLoggerLevel, config: INGXLoggerConfig, message?: any, additional?: any[]): boolean {\r\n    return false;\r\n  }\r\n\r\n  public shouldCallMonitor(level: NgxLoggerLevel, config: INGXLoggerConfig, message?: any, additional?: any[]): boolean {\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerMetadata, INGXLoggerServerService } from 'ngx-logger';\r\n\r\n\r\n@Injectable()\r\nexport class NGXLoggerServerServiceMock implements INGXLoggerServerService {\r\n\r\n  public sendToServer(metadata: INGXLoggerMetadata, config: INGXLoggerConfig): void {\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerMetadata, INGXLoggerWriterService } from 'ngx-logger';\r\n\r\n\r\n@Injectable()\r\nexport class NGXLoggerWriterServiceMock implements INGXLoggerWriterService {\r\n  public writeMessage(metadata: INGXLoggerMetadata, config: INGXLoggerConfig): void {\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CustomNGXLoggerService, LoggerModule, NGXLogger, NgxLoggerLevel, TOKEN_LOGGER_CONFIG, TOKEN_LOGGER_CONFIG_ENGINE_FACTORY, TOKEN_LOGGER_MAPPER_SERVICE, TOKEN_LOGGER_METADATA_SERVICE, TOKEN_LOGGER_RULES_SERVICE, TOKEN_LOGGER_SERVER_SERVICE, TOKEN_LOGGER_WRITER_SERVICE } from 'ngx-logger';\r\nimport { NGXLoggerConfigEngineFactoryMock } from './config-engine-factory.mock';\r\nimport { CustomNGXLoggerServiceMock } from './custom-logger.service.mock';\r\nimport { NGXLoggerMock } from './logger.service.mock';\r\nimport { NGXLoggerMapperServiceMock } from './mapper.service.mock';\r\nimport { NGXLoggerMetadataServiceMock } from './metadata.service.mock';\r\nimport { NGXLoggerRulesServiceMock } from './rules.service.mock';\r\nimport { NGXLoggerServerServiceMock } from './server.service.mock';\r\nimport { NGXLoggerWriterServiceMock } from './writer.service.mock';\r\n\r\n\r\n@NgModule({\r\n  imports: [LoggerModule],\r\n  providers: [\r\n    { provide: NGXLogger, useClass: NGXLoggerMock },\r\n    { provide: TOKEN_LOGGER_CONFIG, useValue: { level: NgxLoggerLevel.ERROR } },\r\n    { provide: TOKEN_LOGGER_CONFIG_ENGINE_FACTORY, useClass: NGXLoggerConfigEngineFactoryMock },\r\n    { provide: TOKEN_LOGGER_METADATA_SERVICE, useClass: NGXLoggerMetadataServiceMock },\r\n    { provide: TOKEN_LOGGER_RULES_SERVICE, useClass: NGXLoggerRulesServiceMock },\r\n    { provide: TOKEN_LOGGER_MAPPER_SERVICE, useClass: NGXLoggerMapperServiceMock },\r\n    { provide: TOKEN_LOGGER_WRITER_SERVICE, useClass: NGXLoggerWriterServiceMock },\r\n    { provide: TOKEN_LOGGER_SERVER_SERVICE, useClass: NGXLoggerServerServiceMock },\r\n    { provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },\r\n  ]\r\n})\r\nexport class LoggerTestingModule { }\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["NgxLoggerLevel","Injectable","of","NGXLogger","TOKEN_LOGGER_CONFIG","TOKEN_LOGGER_CONFIG_ENGINE_FACTORY","TOKEN_LOGGER_METADATA_SERVICE","TOKEN_LOGGER_RULES_SERVICE","TOKEN_LOGGER_MAPPER_SERVICE","TOKEN_LOGGER_WRITER_SERVICE","TOKEN_LOGGER_SERVER_SERVICE","CustomNGXLoggerService","LoggerModule","NgModule"],"mappings":";;;;;;;QAIA;;QAEE,sBAAI,4CAAK;iBAAT;gBACE,OAAOA,wBAAc,CAAC,KAAK,CAAC;aAC7B;;;WAAA;QAED,sBAAI,qDAAc;iBAAlB;gBACE,OAAOA,wBAAc,CAAC,GAAG,CAAC;aAC3B;;;WAAA;QAED,gDAAY,GAAZ,UAAa,MAAwB;SACpC;QAED,6CAAS,GAAT;YACE,OAAO,EAAE,KAAK,EAAEA,wBAAc,CAAC,KAAK,EAAE,CAAC;SACxC;;;yHAfU,yBAAyB;wFAAzB,yBAAyB,WAAzB,yBAAyB;;gFAAzB,yBAAyB;sBADrCC,aAAU;;;;ICCX;;QAEA;;QAEE,sBAAI,gCAAK;iBAAT;gBACE,OAAOD,wBAAc,CAAC,KAAK,CAAC;aAC7B;;;WAAA;QAED,sBAAI,yCAAc;iBAAlB;gBACE,OAAOA,wBAAc,CAAC,GAAG,CAAC;aAC3B;;;WAAA;QAED,6BAAK,GAAL,UAAM,OAA2B;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACtD;QAED,6BAAK,GAAL,UAAM,OAA2B;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACtD;QAED,4BAAI,GAAJ,UAAK,OAA2B;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACrD;QAED,2BAAG,GAAH,UAAI,OAA2B;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACpD;QAED,4BAAI,GAAJ,UAAK,OAA2B;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACrD;QAED,6BAAK,GAAL,UAAM,OAA2B;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACtD;QAED,6BAAK,GAAL,UAAM,OAA2B;YAAE,oBAAoB;iBAApB,UAAoB,EAApB,qBAAoB,EAApB,IAAoB;gBAApB,mCAAoB;;SACtD;QAED,oCAAY,GAAZ,UAAa,MAAW;SAEvB;QAED,4CAAoB,GAApB,UAAqB,OAAoB;SACxC;QAED,uCAAe,GAAf,UAAgB,MAAkB;SACjC;QAED,uCAAe,GAAf,UAAgB,OAA0B;SACzC;QAED,qDAA6B,GAA7B,UAA8B,eAAwB;SACrD;QAED,yCAAiB,GAAjB;YACE,OAAO,EAAE,KAAK,EAAEA,wBAAc,CAAC,KAAK,EAAE,CAAC;SACxC;;;iGAjDU,aAAa;4EAAb,aAAa,WAAb,aAAa;;gFAAb,aAAa;sBADzBC,aAAU;;;;ICFX;;;;QAIA;;QAEE,2CAAM,GAAN;YACE,OAAO,IAAI,aAAa,EAAE,CAAC;SAC5B;;;2HAJU,0BAA0B;yFAA1B,0BAA0B,WAA1B,0BAA0B;;gFAA1B,0BAA0B;sBADtCA,aAAU;;;;;QCDX;;QAEE,8DAAmB,GAAnB,UAAoB,MAAwB;YAC1C,OAAO,IAAI,yBAAyB,EAAE,CAAC;SACxC;;;uIAJU,gCAAgC;+FAAhC,gCAAgC,WAAhC,gCAAgC;;gFAAhC,gCAAgC;sBAD5CA,aAAU;;;;;QCEX;;QACS,mDAAc,GAAd,UAAe,MAAwB,EAAE,QAA4B;YAC1E,OAAOC,OAAE,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC;SACpC;;;2HAHU,0BAA0B;yFAA1B,0BAA0B,WAA1B,0BAA0B;;gFAA1B,0BAA0B;sBADtCD,aAAU;;;;;QCAX;;QAES,kDAAW,GAAX,UACL,KAAqB,EACrB,MAAwB,EACxB,OAA2B,EAC3B,UAAkB;YAElB,OAAO;gBACL,KAAK,EAAE,KAAK;aACb,CAAC;SACH;;;+HAXU,4BAA4B;2FAA5B,4BAA4B,WAA5B,4BAA4B;;gFAA5B,4BAA4B;sBADxCA,aAAU;;;;;QCCX;;QAES,oDAAgB,GAAhB,UAAiB,KAAqB,EAAE,MAAwB,EAAE,OAAa,EAAE,UAAkB;YACxG,OAAO,KAAK,CAAC;SACd;QAEM,oDAAgB,GAAhB,UAAiB,KAAqB,EAAE,MAAwB,EAAE,OAAa,EAAE,UAAkB;YACxG,OAAO,KAAK,CAAC;SACd;QAEM,qDAAiB,GAAjB,UAAkB,KAAqB,EAAE,MAAwB,EAAE,OAAa,EAAE,UAAkB;YACzG,OAAO,KAAK,CAAC;SACd;;;yHAZU,yBAAyB;wFAAzB,yBAAyB,WAAzB,yBAAyB;;gFAAzB,yBAAyB;sBADrCA,aAAU;;;;;QCCX;;QAES,iDAAY,GAAZ,UAAa,QAA4B,EAAE,MAAwB;SACzE;;;2HAHU,0BAA0B;yFAA1B,0BAA0B,WAA1B,0BAA0B;;gFAA1B,0BAA0B;sBADtCA,aAAU;;;;;QCCX;;QACS,iDAAY,GAAZ,UAAa,QAA4B,EAAE,MAAwB;SACzE;;;2HAFU,0BAA0B;yFAA1B,0BAA0B,WAA1B,0BAA0B;;gFAA1B,0BAA0B;sBADtCA,aAAU;;;;;QCsBX;;;;6GAAa,mBAAmB;8EAAnB,mBAAmB;mFAZnB;YACT,EAAE,OAAO,EAAEE,mBAAS,EAAE,QAAQ,EAAE,aAAa,EAAE;YAC/C,EAAE,OAAO,EAAEC,6BAAmB,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAEJ,wBAAc,CAAC,KAAK,EAAE,EAAE;YAC3E,EAAE,OAAO,EAAEK,4CAAkC,EAAE,QAAQ,EAAE,gCAAgC,EAAE;YAC3F,EAAE,OAAO,EAAEC,uCAA6B,EAAE,QAAQ,EAAE,4BAA4B,EAAE;YAClF,EAAE,OAAO,EAAEC,oCAA0B,EAAE,QAAQ,EAAE,yBAAyB,EAAE;YAC5E,EAAE,OAAO,EAAEC,qCAA2B,EAAE,QAAQ,EAAE,0BAA0B,EAAE;YAC9E,EAAE,OAAO,EAAEC,qCAA2B,EAAE,QAAQ,EAAE,0BAA0B,EAAE;YAC9E,EAAE,OAAO,EAAEC,qCAA2B,EAAE,QAAQ,EAAE,0BAA0B,EAAE;YAC9E,EAAE,OAAO,EAAEC,gCAAsB,EAAE,QAAQ,EAAE,0BAA0B,EAAE;SAC1E,YAXQ,CAACC,sBAAY,CAAC;4FAaZ,mBAAmB,cAbpBA,sBAAY;;gFAaX,mBAAmB;sBAd/BC,WAAQ;uBAAC;wBACR,OAAO,EAAE,CAACD,sBAAY,CAAC;wBACvB,SAAS,EAAE;4BACT,EAAE,OAAO,EAAET,mBAAS,EAAE,QAAQ,EAAE,aAAa,EAAE;4BAC/C,EAAE,OAAO,EAAEC,6BAAmB,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAEJ,wBAAc,CAAC,KAAK,EAAE,EAAE;4BAC3E,EAAE,OAAO,EAAEK,4CAAkC,EAAE,QAAQ,EAAE,gCAAgC,EAAE;4BAC3F,EAAE,OAAO,EAAEC,uCAA6B,EAAE,QAAQ,EAAE,4BAA4B,EAAE;4BAClF,EAAE,OAAO,EAAEC,oCAA0B,EAAE,QAAQ,EAAE,yBAAyB,EAAE;4BAC5E,EAAE,OAAO,EAAEC,qCAA2B,EAAE,QAAQ,EAAE,0BAA0B,EAAE;4BAC9E,EAAE,OAAO,EAAEC,qCAA2B,EAAE,QAAQ,EAAE,0BAA0B,EAAE;4BAC9E,EAAE,OAAO,EAAEC,qCAA2B,EAAE,QAAQ,EAAE,0BAA0B,EAAE;4BAC9E,EAAE,OAAO,EAAEC,gCAAsB,EAAE,QAAQ,EAAE,0BAA0B,EAAE;yBAC1E;qBACF;;;;ICzBD;;;;;;;;;;;;;;;;;;;;;"}