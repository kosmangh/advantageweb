{"version":3,"sources":["../../../testing/src/lib/config-engine.mock.ts","../../../testing/src/lib/logger.service.mock.ts","../../../testing/src/lib/custom-logger.service.mock.ts","../../../testing/src/lib/config-engine-factory.mock.ts","../../../testing/src/lib/mapper.service.mock.ts","../../../testing/src/lib/metadata.service.mock.ts","../../../testing/src/lib/rules.service.mock.ts","../../../testing/src/lib/server.service.mock.ts","../../../testing/src/lib/writer.service.mock.ts","../../../testing/src/lib/logger-testing.module.ts"],"names":["NGXLoggerConfigEngineMock","Object","defineProperty","prototype","NgxLoggerLevel","ERROR","OFF","updateConfig","config","getConfig","level","factory","Éµfac","Injectable","NGXLoggerMock","trace","message","additional","_i","arguments","length","debug","info","log","warn","error","fatal","setCustomHttpHeaders","headers","setCustomParams","params","registerMonitor","monitor","setWithCredentialsOptionValue","withCredentials","getConfigSnapshot","CustomNGXLoggerServiceMock","create","NGXLoggerConfigEngineFactoryMock","provideConfigEngine","NGXLoggerMapperServiceMock","getLogPosition","metadata","of","fileName","NGXLoggerMetadataServiceMock","getMetadata","NGXLoggerRulesServiceMock","shouldCallWriter","shouldCallServer","shouldCallMonitor","NGXLoggerServerServiceMock","sendToServer","NGXLoggerWriterServiceMock","writeMessage","LoggerTestingModule","provide","NGXLogger","useClass","TOKEN_LOGGER_CONFIG","useValue","TOKEN_LOGGER_CONFIG_ENGINE_FACTORY","TOKEN_LOGGER_METADATA_SERVICE","TOKEN_LOGGER_RULES_SERVICE","TOKEN_LOGGER_MAPPER_SERVICE","TOKEN_LOGGER_WRITER_SERVICE","TOKEN_LOGGER_SERVER_SERVICE","CustomNGXLoggerService","imports","LoggerModule","NgModule","providers"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerConfigEngine, NgxLoggerLevel } from 'ngx-logger';\r\n\r\n@Injectable()\r\nexport class NGXLoggerConfigEngineMock implements INGXLoggerConfigEngine {\r\n\r\n  get level(): NgxLoggerLevel {\r\n    return NgxLoggerLevel.ERROR;\r\n  }\r\n\r\n  get serverLogLevel(): NgxLoggerLevel {\r\n    return NgxLoggerLevel.OFF;\r\n  }\r\n\r\n  updateConfig(config: INGXLoggerConfig) {\r\n  }\r\n\r\n  getConfig(): INGXLoggerConfig {\r\n    return { level: NgxLoggerLevel.ERROR };\r\n  }\r\n}\r\n","import { HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from \"@angular/core\";\r\nimport { INGXLoggerConfig, INGXLoggerMonitor, NgxLoggerLevel } from 'ngx-logger';\r\n\r\n// todo bmtheo, there should be an interface or something to make sure this mock sticks to the real API\r\n@Injectable()\r\nexport class NGXLoggerMock {\r\n\r\n  get level(): NgxLoggerLevel {\r\n    return NgxLoggerLevel.ERROR;\r\n  }\r\n\r\n  get serverLogLevel(): NgxLoggerLevel {\r\n    return NgxLoggerLevel.OFF;\r\n  }\r\n\r\n  trace(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  debug(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  info(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  log(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  warn(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  error(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  fatal(message?: any | (() => any), ...additional: any[]) {\r\n  }\r\n\r\n  updateConfig(config: any) {\r\n\r\n  }\r\n\r\n  setCustomHttpHeaders(headers: HttpHeaders) {\r\n  }\r\n\r\n  setCustomParams(params: HttpParams) {\r\n  }\r\n\r\n  registerMonitor(monitor: INGXLoggerMonitor) {\r\n  }\r\n\r\n  setWithCredentialsOptionValue(withCredentials: boolean) {\r\n  }\r\n\r\n  getConfigSnapshot(): INGXLoggerConfig {\r\n    return { level: NgxLoggerLevel.ERROR };\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { NGXLoggerMock } from \"./logger.service.mock\";\r\n\r\n/**\r\n * CustomNGXLoggerServiceMock is a mock for CustomNGXLoggerService\r\n */\r\n@Injectable()\r\nexport class CustomNGXLoggerServiceMock {\r\n\r\n  create(): NGXLoggerMock {\r\n    return new NGXLoggerMock();\r\n  }\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerConfigEngine, INGXLoggerConfigEngineFactory } from 'ngx-logger';\r\nimport { NGXLoggerConfigEngineMock } from './config-engine.mock';\r\n\r\n@Injectable()\r\nexport class NGXLoggerConfigEngineFactoryMock implements INGXLoggerConfigEngineFactory {\r\n\r\n  provideConfigEngine(config: INGXLoggerConfig): INGXLoggerConfigEngine {\r\n    return new NGXLoggerConfigEngineMock();\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerLogPosition, INGXLoggerMapperService, INGXLoggerMetadata } from 'ngx-logger';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n\r\n@Injectable()\r\nexport class NGXLoggerMapperServiceMock implements INGXLoggerMapperService {\r\n  public getLogPosition(config: INGXLoggerConfig, metadata: INGXLoggerMetadata): Observable<INGXLoggerLogPosition> {\r\n    return of({ fileName: 'test.ts' });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerMetadata, INGXLoggerMetadataService, NgxLoggerLevel } from 'ngx-logger';\r\n\r\n\r\n@Injectable()\r\nexport class NGXLoggerMetadataServiceMock implements INGXLoggerMetadataService {\r\n\r\n  public getMetadata(\r\n    level: NgxLoggerLevel,\r\n    config: INGXLoggerConfig,\r\n    message?: any | (() => any),\r\n    additional?: any[],\r\n  ): INGXLoggerMetadata {\r\n    return {\r\n      level: level\r\n    };\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerRulesService, NgxLoggerLevel } from 'ngx-logger';\r\n\r\n\r\n@Injectable()\r\nexport class NGXLoggerRulesServiceMock implements INGXLoggerRulesService {\r\n\r\n  public shouldCallWriter(level: NgxLoggerLevel, config: INGXLoggerConfig, message?: any, additional?: any[]): boolean {\r\n    return false;\r\n  }\r\n\r\n  public shouldCallServer(level: NgxLoggerLevel, config: INGXLoggerConfig, message?: any, additional?: any[]): boolean {\r\n    return false;\r\n  }\r\n\r\n  public shouldCallMonitor(level: NgxLoggerLevel, config: INGXLoggerConfig, message?: any, additional?: any[]): boolean {\r\n    return false;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerMetadata, INGXLoggerServerService } from 'ngx-logger';\r\n\r\n\r\n@Injectable()\r\nexport class NGXLoggerServerServiceMock implements INGXLoggerServerService {\r\n\r\n  public sendToServer(metadata: INGXLoggerMetadata, config: INGXLoggerConfig): void {\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { INGXLoggerConfig, INGXLoggerMetadata, INGXLoggerWriterService } from 'ngx-logger';\r\n\r\n\r\n@Injectable()\r\nexport class NGXLoggerWriterServiceMock implements INGXLoggerWriterService {\r\n  public writeMessage(metadata: INGXLoggerMetadata, config: INGXLoggerConfig): void {\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CustomNGXLoggerService, LoggerModule, NGXLogger, NgxLoggerLevel, TOKEN_LOGGER_CONFIG, TOKEN_LOGGER_CONFIG_ENGINE_FACTORY, TOKEN_LOGGER_MAPPER_SERVICE, TOKEN_LOGGER_METADATA_SERVICE, TOKEN_LOGGER_RULES_SERVICE, TOKEN_LOGGER_SERVER_SERVICE, TOKEN_LOGGER_WRITER_SERVICE } from 'ngx-logger';\r\nimport { NGXLoggerConfigEngineFactoryMock } from './config-engine-factory.mock';\r\nimport { CustomNGXLoggerServiceMock } from './custom-logger.service.mock';\r\nimport { NGXLoggerMock } from './logger.service.mock';\r\nimport { NGXLoggerMapperServiceMock } from './mapper.service.mock';\r\nimport { NGXLoggerMetadataServiceMock } from './metadata.service.mock';\r\nimport { NGXLoggerRulesServiceMock } from './rules.service.mock';\r\nimport { NGXLoggerServerServiceMock } from './server.service.mock';\r\nimport { NGXLoggerWriterServiceMock } from './writer.service.mock';\r\n\r\n\r\n@NgModule({\r\n  imports: [LoggerModule],\r\n  providers: [\r\n    { provide: NGXLogger, useClass: NGXLoggerMock },\r\n    { provide: TOKEN_LOGGER_CONFIG, useValue: { level: NgxLoggerLevel.ERROR } },\r\n    { provide: TOKEN_LOGGER_CONFIG_ENGINE_FACTORY, useClass: NGXLoggerConfigEngineFactoryMock },\r\n    { provide: TOKEN_LOGGER_METADATA_SERVICE, useClass: NGXLoggerMetadataServiceMock },\r\n    { provide: TOKEN_LOGGER_RULES_SERVICE, useClass: NGXLoggerRulesServiceMock },\r\n    { provide: TOKEN_LOGGER_MAPPER_SERVICE, useClass: NGXLoggerMapperServiceMock },\r\n    { provide: TOKEN_LOGGER_WRITER_SERVICE, useClass: NGXLoggerWriterServiceMock },\r\n    { provide: TOKEN_LOGGER_SERVER_SERVICE, useClass: NGXLoggerServerServiceMock },\r\n    { provide: CustomNGXLoggerService, useClass: CustomNGXLoggerServiceMock },\r\n  ]\r\n})\r\nexport class LoggerTestingModule { }\r\n"]}