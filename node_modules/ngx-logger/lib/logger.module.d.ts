import { ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, ModuleWithProviders, ValueProvider } from '@angular/core';
import { INGXLoggerConfig } from './config/iconfig';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export declare class LoggerModule {
    static forRoot(config: INGXLoggerConfig | null | undefined, customProvider?: {
        configProvider?: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider;
        configEngineFactoryProvider?: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider;
        metadataProvider?: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider;
        ruleProvider?: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider;
        mapperProvider?: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider;
        writerProvider?: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider;
        serverProvider?: ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider;
    }): ModuleWithProviders<LoggerModule>;
    static forChild(): ModuleWithProviders<LoggerModule>;
    static ɵfac: i0.ɵɵFactoryDeclaration<LoggerModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<LoggerModule, never, [typeof i1.CommonModule], never>;
    static ɵinj: i0.ɵɵInjectorDeclaration<LoggerModule>;
}
//# sourceMappingURL=logger.module.d.ts.map