/*
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { finalize } from 'rxjs/operators';
import * as i0 from "@angular/core";
class PendingRequestsInterceptor {
    constructor() {
        this._pendingRequests = 0;
        this._pendingRequestsStatus$ = new ReplaySubject(1);
        this._filteredUrlPatterns = [];
        this._filteredMethods = [];
        this._filteredHeaders = [];
        this._forceByPass = false;
    }
    get pendingRequestsStatus$() {
        return this._pendingRequestsStatus$.asObservable();
    }
    get pendingRequests() {
        return this._pendingRequests;
    }
    get filteredUrlPatterns() {
        return this._filteredUrlPatterns;
    }
    set filteredMethods(httpMethods) {
        this._filteredMethods = httpMethods;
    }
    set filteredHeaders(value) {
        this._filteredHeaders = value;
    }
    set forceByPass(value) {
        this._forceByPass = value;
    }
    shouldBypassUrl(url) {
        return this._filteredUrlPatterns.some(e => {
            return e.test(url);
        });
    }
    shouldBypassMethod(req) {
        return this._filteredMethods.some(e => {
            return e.toUpperCase() === req.method.toUpperCase();
        });
    }
    shouldBypassHeader(req) {
        return this._filteredHeaders.some(e => {
            return req.headers.has(e);
        });
    }
    shouldBypass(req) {
        return this._forceByPass
            || this.shouldBypassUrl(req.urlWithParams)
            || this.shouldBypassMethod(req)
            || this.shouldBypassHeader(req);
    }
    intercept(req, next) {
        const shouldBypass = this.shouldBypass(req);
        if (!shouldBypass) {
            this._pendingRequests++;
            if (1 === this._pendingRequests) {
                this._pendingRequestsStatus$.next(true);
            }
        }
        return next.handle(req).pipe(finalize(() => {
            if (!shouldBypass) {
                this._pendingRequests--;
                if (0 === this._pendingRequests) {
                    this._pendingRequestsStatus$.next(false);
                }
            }
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: PendingRequestsInterceptor, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: PendingRequestsInterceptor, providedIn: 'root' }); }
}
export { PendingRequestsInterceptor };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: PendingRequestsInterceptor, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
export const PendingRequestsInterceptorProvider = [{
        provide: HTTP_INTERCEPTORS,
        useExisting: PendingRequestsInterceptor,
        multi: true
    }];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVuZGluZy1yZXF1ZXN0cy1pbnRlcmNlcHRvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9zZXJ2aWNlcy9wZW5kaW5nLXJlcXVlc3RzLWludGVyY2VwdG9yLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7R0FPRztBQUVILE9BQU8sRUFBRSxpQkFBaUIsRUFBd0QsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRyxPQUFPLEVBQW9CLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQWMsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFFMUMsTUFHYSwwQkFBMEI7SUFIdkM7UUFLWSxxQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFDckIsNEJBQXVCLEdBQUcsSUFBSSxhQUFhLENBQVUsQ0FBQyxDQUFDLENBQUM7UUFDeEQseUJBQW9CLEdBQWEsRUFBRSxDQUFDO1FBQ3BDLHFCQUFnQixHQUFhLEVBQUUsQ0FBQztRQUNoQyxxQkFBZ0IsR0FBYSxFQUFFLENBQUM7UUFDaEMsaUJBQVksR0FBRyxLQUFLLENBQUM7S0EwRWhDO0lBeEVHLElBQUksc0JBQXNCO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLHVCQUF1QixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3ZELENBQUM7SUFFRCxJQUFJLGVBQWU7UUFDZixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUNqQyxDQUFDO0lBRUQsSUFBSSxtQkFBbUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUM7SUFDckMsQ0FBQztJQUVELElBQUksZUFBZSxDQUFDLFdBQXFCO1FBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxXQUFXLENBQUM7SUFDeEMsQ0FBQztJQUVELElBQUksZUFBZSxDQUFDLEtBQWU7UUFDL0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztJQUNsQyxDQUFDO0lBRUQsSUFBSSxXQUFXLENBQUMsS0FBYztRQUMxQixJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBRU8sZUFBZSxDQUFDLEdBQVc7UUFDL0IsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3RDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxHQUFxQjtRQUM1QyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDbEMsT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLEtBQUssR0FBRyxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN4RCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyxrQkFBa0IsQ0FBQyxHQUFxQjtRQUM1QyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDbEMsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyxZQUFZLENBQUMsR0FBcUI7UUFDdEMsT0FBTyxJQUFJLENBQUMsWUFBWTtlQUNqQixJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUM7ZUFDdkMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQztlQUM1QixJQUFJLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELFNBQVMsQ0FBQyxHQUFxQixFQUFFLElBQWlCO1FBQzlDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFNUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNmLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBRXhCLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMzQztTQUNKO1FBRUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDeEIsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUNWLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ2YsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7Z0JBRXhCLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtvQkFDN0IsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDNUM7YUFDSjtRQUNMLENBQUMsQ0FBQyxDQUNMLENBQUM7SUFDTixDQUFDOzhHQWhGUSwwQkFBMEI7a0hBQTFCLDBCQUEwQixjQUZ2QixNQUFNOztTQUVULDBCQUEwQjsyRkFBMUIsMEJBQTBCO2tCQUh0QyxVQUFVO21CQUFDO29CQUNSLFVBQVUsRUFBRSxNQUFNO2lCQUNyQjs7QUFvRkQsTUFBTSxDQUFDLE1BQU0sa0NBQWtDLEdBQXVCLENBQUM7UUFDbkUsT0FBTyxFQUFFLGlCQUFpQjtRQUMxQixXQUFXLEVBQUUsMEJBQTBCO1FBQ3ZDLEtBQUssRUFBRSxJQUFJO0tBQ2QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1JcbiAqIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUlxuICogSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU5cbiAqIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG4gKi9cblxuaW1wb3J0IHsgSFRUUF9JTlRFUkNFUFRPUlMsIEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBFeGlzdGluZ1Byb3ZpZGVyLCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQZW5kaW5nUmVxdWVzdHNJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG5cbiAgICBwcml2YXRlIF9wZW5kaW5nUmVxdWVzdHMgPSAwO1xuICAgIHByaXZhdGUgX3BlbmRpbmdSZXF1ZXN0c1N0YXR1cyQgPSBuZXcgUmVwbGF5U3ViamVjdDxib29sZWFuPigxKTtcbiAgICBwcml2YXRlIF9maWx0ZXJlZFVybFBhdHRlcm5zOiBSZWdFeHBbXSA9IFtdO1xuICAgIHByaXZhdGUgX2ZpbHRlcmVkTWV0aG9kczogc3RyaW5nW10gPSBbXTtcbiAgICBwcml2YXRlIF9maWx0ZXJlZEhlYWRlcnM6IHN0cmluZ1tdID0gW107XG4gICAgcHJpdmF0ZSBfZm9yY2VCeVBhc3MgPSBmYWxzZTtcblxuICAgIGdldCBwZW5kaW5nUmVxdWVzdHNTdGF0dXMkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGVuZGluZ1JlcXVlc3RzU3RhdHVzJC5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICBnZXQgcGVuZGluZ1JlcXVlc3RzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wZW5kaW5nUmVxdWVzdHM7XG4gICAgfVxuXG4gICAgZ2V0IGZpbHRlcmVkVXJsUGF0dGVybnMoKTogUmVnRXhwW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmlsdGVyZWRVcmxQYXR0ZXJucztcbiAgICB9XG5cbiAgICBzZXQgZmlsdGVyZWRNZXRob2RzKGh0dHBNZXRob2RzOiBzdHJpbmdbXSkge1xuICAgICAgICB0aGlzLl9maWx0ZXJlZE1ldGhvZHMgPSBodHRwTWV0aG9kcztcbiAgICB9XG5cbiAgICBzZXQgZmlsdGVyZWRIZWFkZXJzKHZhbHVlOiBzdHJpbmdbXSkge1xuICAgICAgICB0aGlzLl9maWx0ZXJlZEhlYWRlcnMgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBzZXQgZm9yY2VCeVBhc3ModmFsdWU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5fZm9yY2VCeVBhc3MgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNob3VsZEJ5cGFzc1VybCh1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmlsdGVyZWRVcmxQYXR0ZXJucy5zb21lKGUgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGUudGVzdCh1cmwpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNob3VsZEJ5cGFzc01ldGhvZChyZXE6IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbHRlcmVkTWV0aG9kcy5zb21lKGUgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGUudG9VcHBlckNhc2UoKSA9PT0gcmVxLm1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNob3VsZEJ5cGFzc0hlYWRlcihyZXE6IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbHRlcmVkSGVhZGVycy5zb21lKGUgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJlcS5oZWFkZXJzLmhhcyhlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG91bGRCeXBhc3MocmVxOiBIdHRwUmVxdWVzdDxhbnk+KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb3JjZUJ5UGFzc1xuICAgICAgICAgICAgfHwgdGhpcy5zaG91bGRCeXBhc3NVcmwocmVxLnVybFdpdGhQYXJhbXMpXG4gICAgICAgICAgICB8fCB0aGlzLnNob3VsZEJ5cGFzc01ldGhvZChyZXEpXG4gICAgICAgICAgICB8fCB0aGlzLnNob3VsZEJ5cGFzc0hlYWRlcihyZXEpO1xuICAgIH1cblxuICAgIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgICAgICBjb25zdCBzaG91bGRCeXBhc3MgPSB0aGlzLnNob3VsZEJ5cGFzcyhyZXEpO1xuXG4gICAgICAgIGlmICghc2hvdWxkQnlwYXNzKSB7XG4gICAgICAgICAgICB0aGlzLl9wZW5kaW5nUmVxdWVzdHMrKztcblxuICAgICAgICAgICAgaWYgKDEgPT09IHRoaXMuX3BlbmRpbmdSZXF1ZXN0cykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdSZXF1ZXN0c1N0YXR1cyQubmV4dCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpLnBpcGUoXG4gICAgICAgICAgICBmaW5hbGl6ZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFzaG91bGRCeXBhc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGVuZGluZ1JlcXVlc3RzLS07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IHRoaXMuX3BlbmRpbmdSZXF1ZXN0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGVuZGluZ1JlcXVlc3RzU3RhdHVzJC5uZXh0KGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgUGVuZGluZ1JlcXVlc3RzSW50ZXJjZXB0b3JQcm92aWRlcjogRXhpc3RpbmdQcm92aWRlcltdID0gW3tcbiAgICBwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUyxcbiAgICB1c2VFeGlzdGluZzogUGVuZGluZ1JlcXVlc3RzSW50ZXJjZXB0b3IsXG4gICAgbXVsdGk6IHRydWVcbn1dO1xuIl19