import { OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { PendingRequestsInterceptor } from '../services/pending-requests-interceptor.service';
import { SpinnerVisibilityService } from '../services/spinner-visibility.service';
import * as i0 from "@angular/core";
export declare class NgHttpLoaderComponent implements OnInit {
    private pendingRequestsInterceptor;
    private spinnerVisibility;
    spinkit: {
        skChasingDots: string;
        skCubeGrid: string;
        skDoubleBounce: string;
        skRotatingPlane: string;
        skSpinnerPulse: string;
        skThreeBounce: string;
        skWanderingCubes: string;
        skWave: string;
    };
    isVisible$: Observable<boolean>;
    visibleUntil: number;
    backdrop: boolean;
    backgroundColor: string;
    debounceDelay: number;
    entryComponent: any;
    extraDuration: number;
    filteredHeaders: string[];
    filteredMethods: string[];
    filteredUrlPatterns: string[];
    minDuration: number;
    opacity: string;
    backdropBackgroundColor: string;
    spinner: string | null;
    constructor(pendingRequestsInterceptor: PendingRequestsInterceptor, spinnerVisibility: SpinnerVisibilityService);
    ngOnInit(): void;
    private initIsvisibleObservable;
    private nullifySpinnerIfEntryComponentIsDefined;
    private initFilters;
    private initFilteredUrlPatterns;
    private initFilteredMethods;
    private initFilteredHeaders;
    private updateExpirationDelay;
    private getVisibilityTimer$;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgHttpLoaderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgHttpLoaderComponent, "ng-http-loader", never, { "backdrop": { "alias": "backdrop"; "required": false; }; "backgroundColor": { "alias": "backgroundColor"; "required": false; }; "debounceDelay": { "alias": "debounceDelay"; "required": false; }; "entryComponent": { "alias": "entryComponent"; "required": false; }; "extraDuration": { "alias": "extraDuration"; "required": false; }; "filteredHeaders": { "alias": "filteredHeaders"; "required": false; }; "filteredMethods": { "alias": "filteredMethods"; "required": false; }; "filteredUrlPatterns": { "alias": "filteredUrlPatterns"; "required": false; }; "minDuration": { "alias": "minDuration"; "required": false; }; "opacity": { "alias": "opacity"; "required": false; }; "backdropBackgroundColor": { "alias": "backdropBackgroundColor"; "required": false; }; "spinner": { "alias": "spinner"; "required": false; }; }, {}, never, never, false, never>;
}
