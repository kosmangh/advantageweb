{"version":3,"file":"ngneat-cashew.mjs","sources":["../../../../projects/ngneat/cashew/src/lib/key-serializer.ts","../../../../projects/ngneat/cashew/src/lib/cache-config.ts","../../../../projects/ngneat/cashew/src/lib/cache-bucket.ts","../../../../projects/ngneat/cashew/src/lib/requests-queue.ts","../../../../projects/ngneat/cashew/src/lib/cache-storage.ts","../../../../projects/ngneat/cashew/src/lib/cache-guard.ts","../../../../projects/ngneat/cashew/src/lib/ttl-manager.ts","../../../../projects/ngneat/cashew/src/lib/requests-cache.ts","../../../../projects/ngneat/cashew/src/lib/versions.ts","../../../../projects/ngneat/cashew/src/lib/cache-manager.service.ts","../../../../projects/ngneat/cashew/src/lib/cache-context.ts","../../../../projects/ngneat/cashew/src/lib/cache-interceptor.ts","../../../../projects/ngneat/cashew/src/lib/cache-interceptor.module.ts","../../../../projects/ngneat/cashew/src/lib/local-storage/local-storage.ts","../../../../projects/ngneat/cashew/src/lib/local-storage/local-storage-cache.ts","../../../../projects/ngneat/cashew/src/lib/local-storage/local-storage-ttl.ts","../../../../projects/ngneat/cashew/src/lib/local-storage/local-storage-versions.ts","../../../../projects/ngneat/cashew/src/lib/local-storage/local-storage-providers.ts","../../../../projects/ngneat/cashew/src/lib/utils.ts","../../../../projects/ngneat/cashew/src/ngneat-cashew.ts"],"sourcesContent":["import { HttpRequest } from '@angular/common/http';\nimport { ContextOptions } from './cache-context';\n\nexport abstract class KeySerializer {\n  abstract serialize(request: HttpRequest<any>, context: ContextOptions): string;\n}\n\nexport class DefaultKeySerializer extends KeySerializer {\n  serialize(request: HttpRequest<any>, context: ContextOptions) {\n    const { key } = context;\n\n    if (key) {\n      return typeof key === 'function' ? key(request) : key;\n    }\n\n    return request.urlWithParams;\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport interface HttpCacheConfig {\n  strategy: 'implicit' | 'explicit';\n  mode: 'stateManagement' | 'cache';\n  skipInterceptorDeclaration?: boolean;\n  ttl: number;\n  responseSerializer?: (value: any) => any;\n}\n\nexport const defaultConfig: HttpCacheConfig = {\n  strategy: 'explicit',\n  mode: 'cache',\n  ttl: 3_600_000 // One hour\n};\n\nexport const HTTP_CACHE_CONFIG = new InjectionToken<HttpCacheConfig>('HTTP_CACHE_CONFIG');\n","export class CacheBucket extends Set<string> {}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class RequestsQueue extends Map<string, Observable<HttpEvent<any>>> {}\n","import { HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nexport abstract class HttpCacheStorage extends Map<string, HttpResponse<any> | boolean> {}\n\n@Injectable()\nexport class DefaultHttpCacheStorage extends HttpCacheStorage {}\n","import { HttpRequest } from '@angular/common/http';\n\nexport abstract class HttpCacheGuard {\n  abstract canActivate(request: HttpRequest<any>): boolean;\n}\n\nexport class DefaultHttpCacheGuard implements HttpCacheGuard {\n  canActivate(request: HttpRequest<any>): boolean {\n    return request.method === 'GET' && request.responseType === 'json';\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HTTP_CACHE_CONFIG, HttpCacheConfig } from './cache-config';\n\nexport abstract class TTLManager extends Map<string, number> {\n  abstract isValid(key: string): boolean;\n}\n\n@Injectable()\nexport class DefaultTTLManager extends TTLManager {\n  constructor(@Inject(HTTP_CACHE_CONFIG) private config: HttpCacheConfig) {\n    super();\n  }\n\n  isValid(key: string): boolean {\n    return this.get(key)! > new Date().getTime();\n  }\n\n  set(key: string, ttl: number) {\n    return super.set(key, new Date().setMilliseconds(ttl || this.config.ttl));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpRequest } from '@angular/common/http';\n\n@Injectable()\nexport class RequestsCache extends Map<string, HttpRequest<any>> {}\n","import { Injectable } from '@angular/core';\n\nexport abstract class HttpCacheVersions extends Map<string, string> {}\n\n@Injectable()\nexport class DefaultHttpVersions extends HttpCacheVersions {}\n","import { HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { HTTP_CACHE_CONFIG, HttpCacheConfig } from './cache-config';\nimport { HttpCacheStorage } from './cache-storage';\nimport { TTLManager } from './ttl-manager';\nimport { HttpCacheGuard } from './cache-guard';\nimport { RequestsQueue } from './requests-queue';\nimport { CacheBucket } from './cache-bucket';\nimport { RequestsCache } from './requests-cache';\nimport { HttpCacheVersions } from './versions';\n\n@Injectable()\nexport class HttpCacheManager {\n  constructor(\n    private queue: RequestsQueue,\n    private storage: HttpCacheStorage,\n    private guard: HttpCacheGuard,\n    private ttlManager: TTLManager,\n    private requests: RequestsCache,\n    private version: HttpCacheVersions,\n    @Inject(HTTP_CACHE_CONFIG) private config: HttpCacheConfig\n  ) {}\n\n  validate(key: string) {\n    const has = this.storage.has(key);\n    const isValid = this.ttlManager.isValid(key);\n\n    if (has && isValid) return true;\n\n    this.storage.delete(key);\n\n    return false;\n  }\n\n  get<T = any>(key: string): HttpResponse<T> {\n    return this._resolveResponse<T>(this.storage.get(key)! as HttpResponse<any>);\n  }\n\n  has(key: string) {\n    return this.storage.has(key);\n  }\n\n  set(key: string, body: HttpResponse<any> | any, { ttl, bucket }: { ttl?: number; bucket?: CacheBucket } = {}) {\n    let response = body;\n\n    if (!(body instanceof HttpResponse)) {\n      response = new HttpResponse({\n        body,\n        status: 200,\n        url: key\n      });\n    }\n\n    this._set(key, response, ttl!);\n    bucket && bucket.add(key);\n  }\n\n  delete(\n    key: string | CacheBucket,\n    { deleteRequests, deleteVersions }: { deleteVersions?: boolean; deleteRequests?: boolean } = {}\n  ): void {\n    if (key instanceof CacheBucket) {\n      key.forEach(value => this.delete(value));\n      key.clear();\n\n      return;\n    }\n\n    this.storage.delete(key);\n    this.ttlManager.delete(key);\n    this.queue.delete(key);\n\n    if (deleteRequests !== false) {\n      this._getRequests().delete(key);\n    }\n\n    if (deleteVersions !== false) {\n      this._getVersions().delete(key);\n    }\n  }\n\n  clear() {\n    this.storage.clear();\n    this.ttlManager.clear();\n    this.queue.clear();\n    this._getVersions().clear();\n    this._getRequests().clear();\n  }\n\n  _getQueue() {\n    return this.queue;\n  }\n\n  _getRequests() {\n    return this.requests;\n  }\n\n  _getVersions() {\n    return this.version;\n  }\n\n  _isCacheable(canActivate: boolean, cache: boolean) {\n    const strategy = this.config.strategy;\n\n    if (strategy === 'explicit') {\n      return cache;\n    }\n\n    if (canActivate && strategy === 'implicit') {\n      return cache !== false;\n    }\n\n    return false;\n  }\n\n  _set(key: string, response: HttpResponse<any> | boolean, ttl: number) {\n    this.storage.set(key, response);\n    this.ttlManager.set(key, ttl);\n  }\n\n  _canActivate(request: HttpRequest<any>) {\n    return this.guard.canActivate(request);\n  }\n\n  _resolveResponse<T = any>(event: HttpResponse<T>): HttpResponse<T> {\n    return this.config.responseSerializer ? event.clone({ body: this.config.responseSerializer(event.body) }) : event;\n  }\n}\n","import { HttpContext, HttpContextToken, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { EMPTY, Observable } from 'rxjs';\nimport { CacheBucket } from './cache-bucket';\nimport { HttpCacheConfig } from './cache-config';\n\nexport interface ContextOptions {\n  cache?: boolean;\n  ttl?: number;\n  key?: string | ((request: HttpRequest<any>) => string);\n  bucket?: CacheBucket;\n  version?: string;\n  clearCachePredicate?<T>(\n    previousRequest: HttpRequest<T> | undefined,\n    currentRequest: HttpRequest<T>,\n    key: string\n  ): boolean;\n  context?: HttpContext;\n  mode?: HttpCacheConfig['mode'];\n  returnSource?: Observable<HttpResponse<any>>;\n}\n\nexport const CACHE_CONTEXT = new HttpContextToken<ContextOptions>(() => ({}));\n\nexport function withCache(options: ContextOptions = {}) {\n  const { context, ...remainingOptions } = options;\n  return (context ?? new HttpContext()).set(CACHE_CONTEXT, {\n    cache: true,\n    returnSource: EMPTY,\n    ...remainingOptions\n  });\n}\n","import { Inject, Injectable, PLATFORM_ID } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { share, tap } from 'rxjs/operators';\nimport { HTTP_CACHE_CONFIG, HttpCacheConfig } from './cache-config';\n\nimport { HttpCacheManager } from './cache-manager.service';\nimport { KeySerializer } from './key-serializer';\nimport { CACHE_CONTEXT } from './cache-context';\nimport { isPlatformServer } from '@angular/common';\n\n@Injectable()\nexport class HttpCacheInterceptor implements HttpInterceptor {\n  constructor(\n    private httpCacheManager: HttpCacheManager,\n    private keySerializer: KeySerializer,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Inject(HTTP_CACHE_CONFIG) private config: HttpCacheConfig\n  ) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const context = request.context.get(CACHE_CONTEXT);\n\n    if (isPlatformServer(this.platformId)) {\n      return next.handle(request);\n    }\n\n    const key = this.keySerializer.serialize(request, context);\n\n    const {\n      cache = this.config.strategy === 'implicit',\n      ttl,\n      bucket,\n      clearCachePredicate,\n      version,\n      mode,\n      returnSource\n    } = context;\n\n    if (version) {\n      const versions = this.httpCacheManager._getVersions();\n      const currentVersion = versions.get(key);\n\n      if (currentVersion !== version) {\n        this.httpCacheManager.delete(key);\n      }\n\n      versions.set(key, version);\n    }\n\n    if (key && clearCachePredicate) {\n      const requests = this.httpCacheManager._getRequests();\n      const clearCache = clearCachePredicate(requests.get(key)!, requests.set(key, request).get(key)!, key);\n\n      if (clearCache) {\n        this.httpCacheManager.delete(key, { deleteRequests: false, deleteVersions: false });\n      }\n    }\n\n    const canActivate = this.httpCacheManager._canActivate(request);\n\n    if (this.httpCacheManager._isCacheable(canActivate, cache!)) {\n      const queue = this.httpCacheManager._getQueue();\n\n      bucket && bucket.add(key);\n\n      if (queue.has(key)) {\n        return queue.get(key)!;\n      }\n\n      if (this.httpCacheManager.validate(key)) {\n        return mode === 'stateManagement' ? returnSource! : of(this.httpCacheManager.get(key));\n      }\n\n      const shared = next.handle(request).pipe(\n        tap(\n          event => {\n            if (event instanceof HttpResponse) {\n              if (mode === 'stateManagement') {\n                this.httpCacheManager._set(key, true, ttl || this.config.ttl);\n              } else {\n                const cache = this.httpCacheManager._resolveResponse(event);\n                this.httpCacheManager._set(key, cache, ttl || this.config.ttl);\n              }\n              queue.delete(key);\n            }\n          },\n          err => queue.delete(key)\n        ),\n        share()\n      );\n\n      queue.set(key, shared);\n\n      return shared;\n    }\n\n    return next.handle(request);\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { HttpCacheInterceptor } from './cache-interceptor';\nimport { DefaultKeySerializer, KeySerializer } from './key-serializer';\nimport { DefaultHttpCacheStorage, HttpCacheStorage } from './cache-storage';\nimport { defaultConfig, HTTP_CACHE_CONFIG, HttpCacheConfig } from './cache-config';\nimport { HttpCacheManager } from './cache-manager.service';\nimport { DefaultTTLManager, TTLManager } from './ttl-manager';\nimport { DefaultHttpCacheGuard, HttpCacheGuard } from './cache-guard';\nimport { RequestsQueue } from './requests-queue';\nimport { RequestsCache } from './requests-cache';\nimport { DefaultHttpVersions, HttpCacheVersions } from './versions';\n\n@NgModule({})\nexport class HttpCacheInterceptorModule {\n  static forRoot(config: Partial<HttpCacheConfig> = {}): ModuleWithProviders<HttpCacheInterceptorModule> {\n    return {\n      providers: [\n        { provide: HTTP_CACHE_CONFIG, useValue: { ...defaultConfig, ...config } },\n        { provide: KeySerializer, useClass: DefaultKeySerializer },\n        { provide: HttpCacheStorage, useClass: DefaultHttpCacheStorage },\n        { provide: TTLManager, useClass: DefaultTTLManager },\n        { provide: HttpCacheGuard, useClass: DefaultHttpCacheGuard },\n        { provide: HttpCacheVersions, useClass: DefaultHttpVersions },\n        config.skipInterceptorDeclaration\n          ? []\n          : { provide: HTTP_INTERCEPTORS, useClass: HttpCacheInterceptor, multi: true },\n        HttpCacheManager,\n        RequestsQueue,\n        RequestsCache\n      ],\n      ngModule: HttpCacheInterceptorModule\n    };\n  }\n}\n","export const storage = {\n  clearItem(key: string) {\n    localStorage.removeItem(key);\n  },\n  setItem(key: string, value: any) {\n    localStorage.setItem(key, JSON.stringify(value));\n  },\n  getItem(key: string): any {\n    const value = localStorage.getItem(key);\n\n    if (!value) {\n      return undefined;\n    }\n\n    return JSON.parse(value);\n  }\n};\n","import { HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { HttpCacheStorage } from '../cache-storage';\nimport { storage } from './local-storage';\n\nconst KEY = `@cache`;\n\nfunction createKey(key: string) {\n  return `${KEY}-${key}`;\n}\n\n@Injectable()\nexport class HttpCacheLocalStorage extends HttpCacheStorage {\n  has(key: string): boolean {\n    return super.has(createKey(key)) || !!storage.getItem(createKey(key));\n  }\n\n  get(key: string): HttpResponse<any> | boolean {\n    const cacheValue = super.get(createKey(key));\n\n    if (cacheValue) {\n      return cacheValue;\n    }\n\n    const value = storage.getItem(createKey(key));\n\n    if (value) {\n      super.set(createKey(key), new HttpResponse(value));\n    }\n\n    return super.get(createKey(key))!;\n  }\n\n  set(key: string, response: HttpResponse<any>) {\n    storage.setItem(createKey(key), response);\n\n    return super.set(createKey(key), response);\n  }\n\n  delete(key: string) {\n    storage.clearItem(createKey(key));\n\n    return super.delete(createKey(key));\n  }\n\n  clear() {\n    super.forEach((value, key) => {\n      super.delete(key);\n      storage.clearItem(key);\n    });\n  }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { HTTP_CACHE_CONFIG, HttpCacheConfig } from '../cache-config';\nimport { DefaultTTLManager, TTLManager } from '../ttl-manager';\nimport { storage } from './local-storage';\n\nconst KEY = `@ttl`;\n\nfunction createKey(key: string) {\n  return `${KEY}-${key}`;\n}\n\n@Injectable()\nexport class LocalStorageTTLManager extends TTLManager {\n  private readonly ttl: DefaultTTLManager;\n\n  constructor(@Inject(HTTP_CACHE_CONFIG) private config: HttpCacheConfig) {\n    super();\n    this.ttl = new DefaultTTLManager(config);\n  }\n\n  isValid(key: string): boolean {\n    const valid = this.ttl.isValid(createKey(key));\n\n    if (valid) {\n      return true;\n    }\n\n    const localStorageTimeStamp = storage.getItem(createKey(key));\n    const validInStorage = localStorageTimeStamp > new Date().getTime();\n\n    if (validInStorage) {\n      this.ttl.set(createKey(key), localStorageTimeStamp - new Date().getTime());\n    }\n\n    return validInStorage;\n  }\n\n  set(key: string, ttl: number) {\n    const resolveTTL = ttl ?? this.config.ttl;\n    storage.setItem(createKey(key), new Date().setMilliseconds(resolveTTL));\n    this.ttl.set(createKey(key), resolveTTL);\n\n    return this;\n  }\n\n  delete(key: string) {\n    this.ttl.delete(createKey(key));\n    storage.clearItem(createKey(key));\n\n    return true;\n  }\n\n  clear() {\n    this.ttl.forEach((_: any, key: string) => {\n      this.ttl.delete(key);\n      storage.clearItem(key);\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { storage } from './local-storage';\nimport { HttpCacheVersions } from '../versions';\n\nconst KEY = `@version`;\n\nfunction createKey(key: string) {\n  return `${KEY}-${key}`;\n}\n\n@Injectable()\nexport class LocalStorageVersionsManager extends HttpCacheVersions {\n  has(key: string): boolean {\n    return super.has(createKey(key)) || !!storage.getItem(createKey(key));\n  }\n\n  get(key: string): string {\n    const cacheValue = super.get(createKey(key));\n\n    if (cacheValue) {\n      return cacheValue;\n    }\n\n    const value = storage.getItem(createKey(key));\n\n    if (value) {\n      super.set(createKey(key), value);\n    }\n\n    return super.get(createKey(key))!;\n  }\n\n  set(key: string, version: string) {\n    storage.setItem(createKey(key), version);\n\n    return super.set(createKey(key), version);\n  }\n\n  delete(key: string) {\n    super.delete(key);\n    storage.clearItem(key);\n\n    return true;\n  }\n\n  clear() {\n    super.forEach((_: any, key: string) => {\n      super.delete(key);\n      storage.clearItem(key);\n    });\n  }\n}\n","import { TTLManager } from '../ttl-manager';\nimport { HttpCacheStorage } from '../cache-storage';\nimport { HttpCacheLocalStorage } from './local-storage-cache';\nimport { LocalStorageTTLManager } from './local-storage-ttl';\nimport { HttpCacheVersions } from '../versions';\nimport { LocalStorageVersionsManager } from './local-storage-versions';\n\nexport const useHttpCacheLocalStorage = [\n  { provide: HttpCacheStorage, useClass: HttpCacheLocalStorage },\n  { provide: TTLManager, useClass: LocalStorageTTLManager },\n  { provide: HttpCacheVersions, useClass: LocalStorageVersionsManager }\n];\n","import { HttpRequest } from '@angular/common/http';\n\nexport function requestDataChanged(previousRequest: HttpRequest<any> | undefined, currentRequest: HttpRequest<any>) {\n  return (\n    previousRequest?.urlWithParams !== currentRequest.urlWithParams ||\n    JSON.stringify(previousRequest?.body) !== JSON.stringify(currentRequest.body)\n  );\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.HttpCacheManager","i2.KeySerializer","KEY","createKey"],"mappings":"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"}