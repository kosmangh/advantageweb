import { HttpRequest, HttpResponse } from '@angular/common/http';
import { HttpCacheConfig } from './cache-config';
import { HttpCacheStorage } from './cache-storage';
import { TTLManager } from './ttl-manager';
import { HttpCacheGuard } from './cache-guard';
import { RequestsQueue } from './requests-queue';
import { CacheBucket } from './cache-bucket';
import { RequestsCache } from './requests-cache';
import { HttpCacheVersions } from './versions';
import * as i0 from "@angular/core";
export declare class HttpCacheManager {
    private queue;
    private storage;
    private guard;
    private ttlManager;
    private requests;
    private version;
    private config;
    constructor(queue: RequestsQueue, storage: HttpCacheStorage, guard: HttpCacheGuard, ttlManager: TTLManager, requests: RequestsCache, version: HttpCacheVersions, config: HttpCacheConfig);
    validate(key: string): boolean;
    get<T = any>(key: string): HttpResponse<T>;
    has(key: string): boolean;
    set(key: string, body: HttpResponse<any> | any, { ttl, bucket }?: {
        ttl?: number;
        bucket?: CacheBucket;
    }): void;
    delete(key: string | CacheBucket, { deleteRequests, deleteVersions }?: {
        deleteVersions?: boolean;
        deleteRequests?: boolean;
    }): void;
    clear(): void;
    _getQueue(): RequestsQueue;
    _getRequests(): RequestsCache;
    _getVersions(): HttpCacheVersions;
    _isCacheable(canActivate: boolean, cache: boolean): boolean;
    _set(key: string, response: HttpResponse<any> | boolean, ttl: number): void;
    _canActivate(request: HttpRequest<any>): boolean;
    _resolveResponse<T = any>(event: HttpResponse<T>): HttpResponse<T>;
    static ɵfac: i0.ɵɵFactoryDeclaration<HttpCacheManager, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<HttpCacheManager>;
}
