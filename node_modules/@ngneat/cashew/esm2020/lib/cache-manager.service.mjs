import { HttpResponse } from '@angular/common/http';
import { Inject, Injectable } from '@angular/core';
import { HTTP_CACHE_CONFIG } from './cache-config';
import { CacheBucket } from './cache-bucket';
import * as i0 from "@angular/core";
import * as i1 from "./requests-queue";
import * as i2 from "./cache-storage";
import * as i3 from "./cache-guard";
import * as i4 from "./ttl-manager";
import * as i5 from "./requests-cache";
import * as i6 from "./versions";
export class HttpCacheManager {
    constructor(queue, storage, guard, ttlManager, requests, version, config) {
        this.queue = queue;
        this.storage = storage;
        this.guard = guard;
        this.ttlManager = ttlManager;
        this.requests = requests;
        this.version = version;
        this.config = config;
    }
    validate(key) {
        const has = this.storage.has(key);
        const isValid = this.ttlManager.isValid(key);
        if (has && isValid)
            return true;
        this.storage.delete(key);
        return false;
    }
    get(key) {
        return this._resolveResponse(this.storage.get(key));
    }
    has(key) {
        return this.storage.has(key);
    }
    set(key, body, { ttl, bucket } = {}) {
        let response = body;
        if (!(body instanceof HttpResponse)) {
            response = new HttpResponse({
                body,
                status: 200,
                url: key
            });
        }
        this._set(key, response, ttl);
        bucket && bucket.add(key);
    }
    delete(key, { deleteRequests, deleteVersions } = {}) {
        if (key instanceof CacheBucket) {
            key.forEach(value => this.delete(value));
            key.clear();
            return;
        }
        this.storage.delete(key);
        this.ttlManager.delete(key);
        this.queue.delete(key);
        if (deleteRequests !== false) {
            this._getRequests().delete(key);
        }
        if (deleteVersions !== false) {
            this._getVersions().delete(key);
        }
    }
    clear() {
        this.storage.clear();
        this.ttlManager.clear();
        this.queue.clear();
        this._getVersions().clear();
        this._getRequests().clear();
    }
    _getQueue() {
        return this.queue;
    }
    _getRequests() {
        return this.requests;
    }
    _getVersions() {
        return this.version;
    }
    _isCacheable(canActivate, cache) {
        const strategy = this.config.strategy;
        if (strategy === 'explicit') {
            return cache;
        }
        if (canActivate && strategy === 'implicit') {
            return cache !== false;
        }
        return false;
    }
    _set(key, response, ttl) {
        this.storage.set(key, response);
        this.ttlManager.set(key, ttl);
    }
    _canActivate(request) {
        return this.guard.canActivate(request);
    }
    _resolveResponse(event) {
        return this.config.responseSerializer ? event.clone({ body: this.config.responseSerializer(event.body) }) : event;
    }
}
HttpCacheManager.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: HttpCacheManager, deps: [{ token: i1.RequestsQueue }, { token: i2.HttpCacheStorage }, { token: i3.HttpCacheGuard }, { token: i4.TTLManager }, { token: i5.RequestsCache }, { token: i6.HttpCacheVersions }, { token: HTTP_CACHE_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });
HttpCacheManager.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: HttpCacheManager });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: HttpCacheManager, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.RequestsQueue }, { type: i2.HttpCacheStorage }, { type: i3.HttpCacheGuard }, { type: i4.TTLManager }, { type: i5.RequestsCache }, { type: i6.HttpCacheVersions }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [HTTP_CACHE_CONFIG]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,