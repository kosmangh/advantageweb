import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { NgModule } from '@angular/core';
import { HttpCacheInterceptor } from './cache-interceptor';
import { DefaultKeySerializer, KeySerializer } from './key-serializer';
import { DefaultHttpCacheStorage, HttpCacheStorage } from './cache-storage';
import { defaultConfig, HTTP_CACHE_CONFIG } from './cache-config';
import { HttpCacheManager } from './cache-manager.service';
import { DefaultTTLManager, TTLManager } from './ttl-manager';
import { DefaultHttpCacheGuard, HttpCacheGuard } from './cache-guard';
import { RequestsQueue } from './requests-queue';
import { RequestsCache } from './requests-cache';
import { DefaultHttpVersions, HttpCacheVersions } from './versions';
import * as i0 from "@angular/core";
export class HttpCacheInterceptorModule {
    static forRoot(config = {}) {
        return {
            providers: [
                { provide: HTTP_CACHE_CONFIG, useValue: { ...defaultConfig, ...config } },
                { provide: KeySerializer, useClass: DefaultKeySerializer },
                { provide: HttpCacheStorage, useClass: DefaultHttpCacheStorage },
                { provide: TTLManager, useClass: DefaultTTLManager },
                { provide: HttpCacheGuard, useClass: DefaultHttpCacheGuard },
                { provide: HttpCacheVersions, useClass: DefaultHttpVersions },
                config.skipInterceptorDeclaration
                    ? []
                    : { provide: HTTP_INTERCEPTORS, useClass: HttpCacheInterceptor, multi: true },
                HttpCacheManager,
                RequestsQueue,
                RequestsCache
            ],
            ngModule: HttpCacheInterceptorModule
        };
    }
}
HttpCacheInterceptorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: HttpCacheInterceptorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
HttpCacheInterceptorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.10", ngImport: i0, type: HttpCacheInterceptorModule });
HttpCacheInterceptorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: HttpCacheInterceptorModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: HttpCacheInterceptorModule, decorators: [{
            type: NgModule,
            args: [{}]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUtaW50ZXJjZXB0b3IubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmduZWF0L2Nhc2hldy9zcmMvbGliL2NhY2hlLWludGVyY2VwdG9yLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RCxPQUFPLEVBQXVCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDdkUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDNUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxpQkFBaUIsRUFBbUIsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxZQUFZLENBQUM7O0FBR3BFLE1BQU0sT0FBTywwQkFBMEI7SUFDckMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFtQyxFQUFFO1FBQ2xELE9BQU87WUFDTCxTQUFTLEVBQUU7Z0JBQ1QsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLEVBQUUsR0FBRyxhQUFhLEVBQUUsR0FBRyxNQUFNLEVBQUUsRUFBRTtnQkFDekUsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxvQkFBb0IsRUFBRTtnQkFDMUQsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLHVCQUF1QixFQUFFO2dCQUNoRSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFO2dCQUNwRCxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFO2dCQUM1RCxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUU7Z0JBQzdELE1BQU0sQ0FBQywwQkFBMEI7b0JBQy9CLENBQUMsQ0FBQyxFQUFFO29CQUNKLENBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsb0JBQW9CLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtnQkFDL0UsZ0JBQWdCO2dCQUNoQixhQUFhO2dCQUNiLGFBQWE7YUFDZDtZQUNELFFBQVEsRUFBRSwwQkFBMEI7U0FDckMsQ0FBQztJQUNKLENBQUM7O3dIQW5CVSwwQkFBMEI7eUhBQTFCLDBCQUEwQjt5SEFBMUIsMEJBQTBCOzRGQUExQiwwQkFBMEI7a0JBRHRDLFFBQVE7bUJBQUMsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhUVFBfSU5URVJDRVBUT1JTIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgTW9kdWxlV2l0aFByb3ZpZGVycywgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDYWNoZUludGVyY2VwdG9yIH0gZnJvbSAnLi9jYWNoZS1pbnRlcmNlcHRvcic7XG5pbXBvcnQgeyBEZWZhdWx0S2V5U2VyaWFsaXplciwgS2V5U2VyaWFsaXplciB9IGZyb20gJy4va2V5LXNlcmlhbGl6ZXInO1xuaW1wb3J0IHsgRGVmYXVsdEh0dHBDYWNoZVN0b3JhZ2UsIEh0dHBDYWNoZVN0b3JhZ2UgfSBmcm9tICcuL2NhY2hlLXN0b3JhZ2UnO1xuaW1wb3J0IHsgZGVmYXVsdENvbmZpZywgSFRUUF9DQUNIRV9DT05GSUcsIEh0dHBDYWNoZUNvbmZpZyB9IGZyb20gJy4vY2FjaGUtY29uZmlnJztcbmltcG9ydCB7IEh0dHBDYWNoZU1hbmFnZXIgfSBmcm9tICcuL2NhY2hlLW1hbmFnZXIuc2VydmljZSc7XG5pbXBvcnQgeyBEZWZhdWx0VFRMTWFuYWdlciwgVFRMTWFuYWdlciB9IGZyb20gJy4vdHRsLW1hbmFnZXInO1xuaW1wb3J0IHsgRGVmYXVsdEh0dHBDYWNoZUd1YXJkLCBIdHRwQ2FjaGVHdWFyZCB9IGZyb20gJy4vY2FjaGUtZ3VhcmQnO1xuaW1wb3J0IHsgUmVxdWVzdHNRdWV1ZSB9IGZyb20gJy4vcmVxdWVzdHMtcXVldWUnO1xuaW1wb3J0IHsgUmVxdWVzdHNDYWNoZSB9IGZyb20gJy4vcmVxdWVzdHMtY2FjaGUnO1xuaW1wb3J0IHsgRGVmYXVsdEh0dHBWZXJzaW9ucywgSHR0cENhY2hlVmVyc2lvbnMgfSBmcm9tICcuL3ZlcnNpb25zJztcblxuQE5nTW9kdWxlKHt9KVxuZXhwb3J0IGNsYXNzIEh0dHBDYWNoZUludGVyY2VwdG9yTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoY29uZmlnOiBQYXJ0aWFsPEh0dHBDYWNoZUNvbmZpZz4gPSB7fSk6IE1vZHVsZVdpdGhQcm92aWRlcnM8SHR0cENhY2hlSW50ZXJjZXB0b3JNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHsgcHJvdmlkZTogSFRUUF9DQUNIRV9DT05GSUcsIHVzZVZhbHVlOiB7IC4uLmRlZmF1bHRDb25maWcsIC4uLmNvbmZpZyB9IH0sXG4gICAgICAgIHsgcHJvdmlkZTogS2V5U2VyaWFsaXplciwgdXNlQ2xhc3M6IERlZmF1bHRLZXlTZXJpYWxpemVyIH0sXG4gICAgICAgIHsgcHJvdmlkZTogSHR0cENhY2hlU3RvcmFnZSwgdXNlQ2xhc3M6IERlZmF1bHRIdHRwQ2FjaGVTdG9yYWdlIH0sXG4gICAgICAgIHsgcHJvdmlkZTogVFRMTWFuYWdlciwgdXNlQ2xhc3M6IERlZmF1bHRUVExNYW5hZ2VyIH0sXG4gICAgICAgIHsgcHJvdmlkZTogSHR0cENhY2hlR3VhcmQsIHVzZUNsYXNzOiBEZWZhdWx0SHR0cENhY2hlR3VhcmQgfSxcbiAgICAgICAgeyBwcm92aWRlOiBIdHRwQ2FjaGVWZXJzaW9ucywgdXNlQ2xhc3M6IERlZmF1bHRIdHRwVmVyc2lvbnMgfSxcbiAgICAgICAgY29uZmlnLnNraXBJbnRlcmNlcHRvckRlY2xhcmF0aW9uXG4gICAgICAgICAgPyBbXVxuICAgICAgICAgIDogeyBwcm92aWRlOiBIVFRQX0lOVEVSQ0VQVE9SUywgdXNlQ2xhc3M6IEh0dHBDYWNoZUludGVyY2VwdG9yLCBtdWx0aTogdHJ1ZSB9LFxuICAgICAgICBIdHRwQ2FjaGVNYW5hZ2VyLFxuICAgICAgICBSZXF1ZXN0c1F1ZXVlLFxuICAgICAgICBSZXF1ZXN0c0NhY2hlXG4gICAgICBdLFxuICAgICAgbmdNb2R1bGU6IEh0dHBDYWNoZUludGVyY2VwdG9yTW9kdWxlXG4gICAgfTtcbiAgfVxufVxuIl19