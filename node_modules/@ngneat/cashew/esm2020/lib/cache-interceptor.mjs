import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { of } from 'rxjs';
import { share, tap } from 'rxjs/operators';
import { HTTP_CACHE_CONFIG } from './cache-config';
import { CACHE_CONTEXT } from './cache-context';
import { isPlatformServer } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "./cache-manager.service";
import * as i2 from "./key-serializer";
export class HttpCacheInterceptor {
    constructor(httpCacheManager, keySerializer, platformId, config) {
        this.httpCacheManager = httpCacheManager;
        this.keySerializer = keySerializer;
        this.platformId = platformId;
        this.config = config;
    }
    intercept(request, next) {
        const context = request.context.get(CACHE_CONTEXT);
        if (isPlatformServer(this.platformId)) {
            return next.handle(request);
        }
        const key = this.keySerializer.serialize(request, context);
        const { cache = this.config.strategy === 'implicit', ttl, bucket, clearCachePredicate, version, mode, returnSource } = context;
        if (version) {
            const versions = this.httpCacheManager._getVersions();
            const currentVersion = versions.get(key);
            if (currentVersion !== version) {
                this.httpCacheManager.delete(key);
            }
            versions.set(key, version);
        }
        if (key && clearCachePredicate) {
            const requests = this.httpCacheManager._getRequests();
            const clearCache = clearCachePredicate(requests.get(key), requests.set(key, request).get(key), key);
            if (clearCache) {
                this.httpCacheManager.delete(key, { deleteRequests: false, deleteVersions: false });
            }
        }
        const canActivate = this.httpCacheManager._canActivate(request);
        if (this.httpCacheManager._isCacheable(canActivate, cache)) {
            const queue = this.httpCacheManager._getQueue();
            bucket && bucket.add(key);
            if (queue.has(key)) {
                return queue.get(key);
            }
            if (this.httpCacheManager.validate(key)) {
                return mode === 'stateManagement' ? returnSource : of(this.httpCacheManager.get(key));
            }
            const shared = next.handle(request).pipe(tap(event => {
                if (event instanceof HttpResponse) {
                    if (mode === 'stateManagement') {
                        this.httpCacheManager._set(key, true, ttl || this.config.ttl);
                    }
                    else {
                        const cache = this.httpCacheManager._resolveResponse(event);
                        this.httpCacheManager._set(key, cache, ttl || this.config.ttl);
                    }
                    queue.delete(key);
                }
            }, err => queue.delete(key)), share());
            queue.set(key, shared);
            return shared;
        }
        return next.handle(request);
    }
}
HttpCacheInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: HttpCacheInterceptor, deps: [{ token: i1.HttpCacheManager }, { token: i2.KeySerializer }, { token: PLATFORM_ID }, { token: HTTP_CACHE_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });
HttpCacheInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: HttpCacheInterceptor });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: HttpCacheInterceptor, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpCacheManager }, { type: i2.KeySerializer }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [HTTP_CACHE_CONFIG]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,