import { Inject, Injectable } from '@angular/core';
import { HTTP_CACHE_CONFIG } from '../cache-config';
import { DefaultTTLManager, TTLManager } from '../ttl-manager';
import { storage } from './local-storage';
import * as i0 from "@angular/core";
const KEY = `@ttl`;
function createKey(key) {
    return `${KEY}-${key}`;
}
export class LocalStorageTTLManager extends TTLManager {
    constructor(config) {
        super();
        this.config = config;
        this.ttl = new DefaultTTLManager(config);
    }
    isValid(key) {
        const valid = this.ttl.isValid(createKey(key));
        if (valid) {
            return true;
        }
        const localStorageTimeStamp = storage.getItem(createKey(key));
        const validInStorage = localStorageTimeStamp > new Date().getTime();
        if (validInStorage) {
            this.ttl.set(createKey(key), localStorageTimeStamp - new Date().getTime());
        }
        return validInStorage;
    }
    set(key, ttl) {
        const resolveTTL = ttl ?? this.config.ttl;
        storage.setItem(createKey(key), new Date().setMilliseconds(resolveTTL));
        this.ttl.set(createKey(key), resolveTTL);
        return this;
    }
    delete(key) {
        this.ttl.delete(createKey(key));
        storage.clearItem(createKey(key));
        return true;
    }
    clear() {
        this.ttl.forEach((_, key) => {
            this.ttl.delete(key);
            storage.clearItem(key);
        });
    }
}
LocalStorageTTLManager.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: LocalStorageTTLManager, deps: [{ token: HTTP_CACHE_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });
LocalStorageTTLManager.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: LocalStorageTTLManager });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: LocalStorageTTLManager, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [HTTP_CACHE_CONFIG]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwtc3RvcmFnZS10dGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ25lYXQvY2FzaGV3L3NyYy9saWIvbG9jYWwtc3RvcmFnZS9sb2NhbC1zdG9yYWdlLXR0bC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsaUJBQWlCLEVBQW1CLE1BQU0saUJBQWlCLENBQUM7QUFDckUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFFMUMsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDO0FBRW5CLFNBQVMsU0FBUyxDQUFDLEdBQVc7SUFDNUIsT0FBTyxHQUFHLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUN6QixDQUFDO0FBR0QsTUFBTSxPQUFPLHNCQUF1QixTQUFRLFVBQVU7SUFHcEQsWUFBK0MsTUFBdUI7UUFDcEUsS0FBSyxFQUFFLENBQUM7UUFEcUMsV0FBTSxHQUFOLE1BQU0sQ0FBaUI7UUFFcEUsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxPQUFPLENBQUMsR0FBVztRQUNqQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUUvQyxJQUFJLEtBQUssRUFBRTtZQUNULE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxNQUFNLHFCQUFxQixHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDOUQsTUFBTSxjQUFjLEdBQUcscUJBQXFCLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUVwRSxJQUFJLGNBQWMsRUFBRTtZQUNsQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUscUJBQXFCLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO1NBQzVFO1FBRUQsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFXLEVBQUUsR0FBVztRQUMxQixNQUFNLFVBQVUsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDMUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUN4RSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFekMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQVc7UUFDaEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDaEMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUVsQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFNLEVBQUUsR0FBVyxFQUFFLEVBQUU7WUFDdkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDckIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7O29IQTdDVSxzQkFBc0Isa0JBR2IsaUJBQWlCO3dIQUgxQixzQkFBc0I7NEZBQXRCLHNCQUFzQjtrQkFEbEMsVUFBVTs7MEJBSUksTUFBTTsyQkFBQyxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEhUVFBfQ0FDSEVfQ09ORklHLCBIdHRwQ2FjaGVDb25maWcgfSBmcm9tICcuLi9jYWNoZS1jb25maWcnO1xuaW1wb3J0IHsgRGVmYXVsdFRUTE1hbmFnZXIsIFRUTE1hbmFnZXIgfSBmcm9tICcuLi90dGwtbWFuYWdlcic7XG5pbXBvcnQgeyBzdG9yYWdlIH0gZnJvbSAnLi9sb2NhbC1zdG9yYWdlJztcblxuY29uc3QgS0VZID0gYEB0dGxgO1xuXG5mdW5jdGlvbiBjcmVhdGVLZXkoa2V5OiBzdHJpbmcpIHtcbiAgcmV0dXJuIGAke0tFWX0tJHtrZXl9YDtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExvY2FsU3RvcmFnZVRUTE1hbmFnZXIgZXh0ZW5kcyBUVExNYW5hZ2VyIHtcbiAgcHJpdmF0ZSByZWFkb25seSB0dGw6IERlZmF1bHRUVExNYW5hZ2VyO1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoSFRUUF9DQUNIRV9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBIdHRwQ2FjaGVDb25maWcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMudHRsID0gbmV3IERlZmF1bHRUVExNYW5hZ2VyKGNvbmZpZyk7XG4gIH1cblxuICBpc1ZhbGlkKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgdmFsaWQgPSB0aGlzLnR0bC5pc1ZhbGlkKGNyZWF0ZUtleShrZXkpKTtcblxuICAgIGlmICh2YWxpZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY29uc3QgbG9jYWxTdG9yYWdlVGltZVN0YW1wID0gc3RvcmFnZS5nZXRJdGVtKGNyZWF0ZUtleShrZXkpKTtcbiAgICBjb25zdCB2YWxpZEluU3RvcmFnZSA9IGxvY2FsU3RvcmFnZVRpbWVTdGFtcCA+IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgaWYgKHZhbGlkSW5TdG9yYWdlKSB7XG4gICAgICB0aGlzLnR0bC5zZXQoY3JlYXRlS2V5KGtleSksIGxvY2FsU3RvcmFnZVRpbWVTdGFtcCAtIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRJblN0b3JhZ2U7XG4gIH1cblxuICBzZXQoa2V5OiBzdHJpbmcsIHR0bDogbnVtYmVyKSB7XG4gICAgY29uc3QgcmVzb2x2ZVRUTCA9IHR0bCA/PyB0aGlzLmNvbmZpZy50dGw7XG4gICAgc3RvcmFnZS5zZXRJdGVtKGNyZWF0ZUtleShrZXkpLCBuZXcgRGF0ZSgpLnNldE1pbGxpc2Vjb25kcyhyZXNvbHZlVFRMKSk7XG4gICAgdGhpcy50dGwuc2V0KGNyZWF0ZUtleShrZXkpLCByZXNvbHZlVFRMKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGVsZXRlKGtleTogc3RyaW5nKSB7XG4gICAgdGhpcy50dGwuZGVsZXRlKGNyZWF0ZUtleShrZXkpKTtcbiAgICBzdG9yYWdlLmNsZWFySXRlbShjcmVhdGVLZXkoa2V5KSk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHRoaXMudHRsLmZvckVhY2goKF86IGFueSwga2V5OiBzdHJpbmcpID0+IHtcbiAgICAgIHRoaXMudHRsLmRlbGV0ZShrZXkpO1xuICAgICAgc3RvcmFnZS5jbGVhckl0ZW0oa2V5KTtcbiAgICB9KTtcbiAgfVxufVxuIl19