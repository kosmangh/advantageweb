import { Injectable } from '@angular/core';
import { storage } from './local-storage';
import { HttpCacheVersions } from '../versions';
import * as i0 from "@angular/core";
const KEY = `@version`;
function createKey(key) {
    return `${KEY}-${key}`;
}
export class LocalStorageVersionsManager extends HttpCacheVersions {
    has(key) {
        return super.has(createKey(key)) || !!storage.getItem(createKey(key));
    }
    get(key) {
        const cacheValue = super.get(createKey(key));
        if (cacheValue) {
            return cacheValue;
        }
        const value = storage.getItem(createKey(key));
        if (value) {
            super.set(createKey(key), value);
        }
        return super.get(createKey(key));
    }
    set(key, version) {
        storage.setItem(createKey(key), version);
        return super.set(createKey(key), version);
    }
    delete(key) {
        super.delete(key);
        storage.clearItem(key);
        return true;
    }
    clear() {
        super.forEach((_, key) => {
            super.delete(key);
            storage.clearItem(key);
        });
    }
}
LocalStorageVersionsManager.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: LocalStorageVersionsManager, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
LocalStorageVersionsManager.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: LocalStorageVersionsManager });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: LocalStorageVersionsManager, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwtc3RvcmFnZS12ZXJzaW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9jYXNoZXcvc3JjL2xpYi9sb2NhbC1zdG9yYWdlL2xvY2FsLXN0b3JhZ2UtdmVyc2lvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sYUFBYSxDQUFDOztBQUVoRCxNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUM7QUFFdkIsU0FBUyxTQUFTLENBQUMsR0FBVztJQUM1QixPQUFPLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQ3pCLENBQUM7QUFHRCxNQUFNLE9BQU8sMkJBQTRCLFNBQVEsaUJBQWlCO0lBQ2hFLEdBQUcsQ0FBQyxHQUFXO1FBQ2IsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBVztRQUNiLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFN0MsSUFBSSxVQUFVLEVBQUU7WUFDZCxPQUFPLFVBQVUsQ0FBQztTQUNuQjtRQUVELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFOUMsSUFBSSxLQUFLLEVBQUU7WUFDVCxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNsQztRQUVELE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUUsQ0FBQztJQUNwQyxDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQVcsRUFBRSxPQUFlO1FBQzlCLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRXpDLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFXO1FBQ2hCLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV2QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLO1FBQ0gsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQU0sRUFBRSxHQUFXLEVBQUUsRUFBRTtZQUNwQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzt5SEF2Q1UsMkJBQTJCOzZIQUEzQiwyQkFBMkI7NEZBQTNCLDJCQUEyQjtrQkFEdkMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHN0b3JhZ2UgfSBmcm9tICcuL2xvY2FsLXN0b3JhZ2UnO1xuaW1wb3J0IHsgSHR0cENhY2hlVmVyc2lvbnMgfSBmcm9tICcuLi92ZXJzaW9ucyc7XG5cbmNvbnN0IEtFWSA9IGBAdmVyc2lvbmA7XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleShrZXk6IHN0cmluZykge1xuICByZXR1cm4gYCR7S0VZfS0ke2tleX1gO1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTG9jYWxTdG9yYWdlVmVyc2lvbnNNYW5hZ2VyIGV4dGVuZHMgSHR0cENhY2hlVmVyc2lvbnMge1xuICBoYXMoa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gc3VwZXIuaGFzKGNyZWF0ZUtleShrZXkpKSB8fCAhIXN0b3JhZ2UuZ2V0SXRlbShjcmVhdGVLZXkoa2V5KSk7XG4gIH1cblxuICBnZXQoa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGNhY2hlVmFsdWUgPSBzdXBlci5nZXQoY3JlYXRlS2V5KGtleSkpO1xuXG4gICAgaWYgKGNhY2hlVmFsdWUpIHtcbiAgICAgIHJldHVybiBjYWNoZVZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbHVlID0gc3RvcmFnZS5nZXRJdGVtKGNyZWF0ZUtleShrZXkpKTtcblxuICAgIGlmICh2YWx1ZSkge1xuICAgICAgc3VwZXIuc2V0KGNyZWF0ZUtleShrZXkpLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cGVyLmdldChjcmVhdGVLZXkoa2V5KSkhO1xuICB9XG5cbiAgc2V0KGtleTogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcpIHtcbiAgICBzdG9yYWdlLnNldEl0ZW0oY3JlYXRlS2V5KGtleSksIHZlcnNpb24pO1xuXG4gICAgcmV0dXJuIHN1cGVyLnNldChjcmVhdGVLZXkoa2V5KSwgdmVyc2lvbik7XG4gIH1cblxuICBkZWxldGUoa2V5OiBzdHJpbmcpIHtcbiAgICBzdXBlci5kZWxldGUoa2V5KTtcbiAgICBzdG9yYWdlLmNsZWFySXRlbShrZXkpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICBzdXBlci5mb3JFYWNoKChfOiBhbnksIGtleTogc3RyaW5nKSA9PiB7XG4gICAgICBzdXBlci5kZWxldGUoa2V5KTtcbiAgICAgIHN0b3JhZ2UuY2xlYXJJdGVtKGtleSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==