import { HttpResponse } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { HttpCacheStorage } from '../cache-storage';
import { storage } from './local-storage';
import * as i0 from "@angular/core";
const KEY = `@cache`;
function createKey(key) {
    return `${KEY}-${key}`;
}
export class HttpCacheLocalStorage extends HttpCacheStorage {
    has(key) {
        return super.has(createKey(key)) || !!storage.getItem(createKey(key));
    }
    get(key) {
        const cacheValue = super.get(createKey(key));
        if (cacheValue) {
            return cacheValue;
        }
        const value = storage.getItem(createKey(key));
        if (value) {
            super.set(createKey(key), new HttpResponse(value));
        }
        return super.get(createKey(key));
    }
    set(key, response) {
        storage.setItem(createKey(key), response);
        return super.set(createKey(key), response);
    }
    delete(key) {
        storage.clearItem(createKey(key));
        return super.delete(createKey(key));
    }
    clear() {
        super.forEach((value, key) => {
            super.delete(key);
            storage.clearItem(key);
        });
    }
}
HttpCacheLocalStorage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: HttpCacheLocalStorage, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
HttpCacheLocalStorage.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: HttpCacheLocalStorage });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.10", ngImport: i0, type: HttpCacheLocalStorage, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwtc3RvcmFnZS1jYWNoZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25nbmVhdC9jYXNoZXcvc3JjL2xpYi9sb2NhbC1zdG9yYWdlL2xvY2FsLXN0b3JhZ2UtY2FjaGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDcEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQUUxQyxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUM7QUFFckIsU0FBUyxTQUFTLENBQUMsR0FBVztJQUM1QixPQUFPLEdBQUcsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQ3pCLENBQUM7QUFHRCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsZ0JBQWdCO0lBQ3pELEdBQUcsQ0FBQyxHQUFXO1FBQ2IsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBVztRQUNiLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFN0MsSUFBSSxVQUFVLEVBQUU7WUFDZCxPQUFPLFVBQVUsQ0FBQztTQUNuQjtRQUVELE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFOUMsSUFBSSxLQUFLLEVBQUU7WUFDVCxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO1FBRUQsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBRSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBVyxFQUFFLFFBQTJCO1FBQzFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRTFDLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFXO1FBQ2hCLE9BQU8sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFbEMsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxLQUFLO1FBQ0gsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUMzQixLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2xCLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzttSEF0Q1UscUJBQXFCO3VIQUFyQixxQkFBcUI7NEZBQXJCLHFCQUFxQjtrQkFEakMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDYWNoZVN0b3JhZ2UgfSBmcm9tICcuLi9jYWNoZS1zdG9yYWdlJztcbmltcG9ydCB7IHN0b3JhZ2UgfSBmcm9tICcuL2xvY2FsLXN0b3JhZ2UnO1xuXG5jb25zdCBLRVkgPSBgQGNhY2hlYDtcblxuZnVuY3Rpb24gY3JlYXRlS2V5KGtleTogc3RyaW5nKSB7XG4gIHJldHVybiBgJHtLRVl9LSR7a2V5fWA7XG59XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBIdHRwQ2FjaGVMb2NhbFN0b3JhZ2UgZXh0ZW5kcyBIdHRwQ2FjaGVTdG9yYWdlIHtcbiAgaGFzKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHN1cGVyLmhhcyhjcmVhdGVLZXkoa2V5KSkgfHwgISFzdG9yYWdlLmdldEl0ZW0oY3JlYXRlS2V5KGtleSkpO1xuICB9XG5cbiAgZ2V0KGtleTogc3RyaW5nKTogSHR0cFJlc3BvbnNlPGFueT4gfCBib29sZWFuIHtcbiAgICBjb25zdCBjYWNoZVZhbHVlID0gc3VwZXIuZ2V0KGNyZWF0ZUtleShrZXkpKTtcblxuICAgIGlmIChjYWNoZVZhbHVlKSB7XG4gICAgICByZXR1cm4gY2FjaGVWYWx1ZTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZSA9IHN0b3JhZ2UuZ2V0SXRlbShjcmVhdGVLZXkoa2V5KSk7XG5cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHN1cGVyLnNldChjcmVhdGVLZXkoa2V5KSwgbmV3IEh0dHBSZXNwb25zZSh2YWx1ZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBzdXBlci5nZXQoY3JlYXRlS2V5KGtleSkpITtcbiAgfVxuXG4gIHNldChrZXk6IHN0cmluZywgcmVzcG9uc2U6IEh0dHBSZXNwb25zZTxhbnk+KSB7XG4gICAgc3RvcmFnZS5zZXRJdGVtKGNyZWF0ZUtleShrZXkpLCByZXNwb25zZSk7XG5cbiAgICByZXR1cm4gc3VwZXIuc2V0KGNyZWF0ZUtleShrZXkpLCByZXNwb25zZSk7XG4gIH1cblxuICBkZWxldGUoa2V5OiBzdHJpbmcpIHtcbiAgICBzdG9yYWdlLmNsZWFySXRlbShjcmVhdGVLZXkoa2V5KSk7XG5cbiAgICByZXR1cm4gc3VwZXIuZGVsZXRlKGNyZWF0ZUtleShrZXkpKTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHN1cGVyLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgIHN1cGVyLmRlbGV0ZShrZXkpO1xuICAgICAgc3RvcmFnZS5jbGVhckl0ZW0oa2V5KTtcbiAgICB9KTtcbiAgfVxufVxuIl19